Pandoc(
    Meta({}),
    [
        Para(
            [
                Str("import"),
                Space(),
                Str("Tabs"),
                Space(),
                Str("from"),
                Space(),
                Quoted(
                    SingleQuote(),
                    [
                        Cite(
                            [Citation("theme/Tabs", [], [], AuthorInText(), 0, 0)],
                            [Str("@theme/Tabs")],
                        )
                    ],
                ),
                Str(";"),
                SoftBreak(),
                Str("import"),
                Space(),
                Str("TabItem"),
                Space(),
                Str("from"),
                Space(),
                Quoted(
                    SingleQuote(),
                    [
                        Cite(
                            [Citation("theme/TabItem", [], [], AuthorInText(), 0, 0)],
                            [Str("@theme/TabItem")],
                        )
                    ],
                ),
                Str(";"),
            ]
        ),
        Header(
            1,
            ("tipos-tamanhos-e-literais", [], []),
            [
                Str("Tipos,"),
                Space(),
                Str("tamanhos"),
                Space(),
                Str("e"),
                Space(),
                Str("literais"),
            ],
        ),
        Para(
            [
                Str("As"),
                Space(),
                Str("diferentes"),
                Space(),
                Str("linguagens"),
                Space(),
                Str("de"),
                Space(),
                Str("programação"),
                Space(),
                Str("podem"),
                Space(),
                Str("possuir"),
                Space(),
                Str("em"),
                Space(),
                Str("sua"),
                Space(),
                Str("implementação"),
                Space(),
                Str("vários"),
                Space(),
                Str("tipos"),
                Space(),
                Str("de"),
                Space(),
                Str("dados"),
                Space(),
                Str("primitivos,"),
                Space(),
                Str("e"),
                Space(),
                Str("os"),
                Space(),
                Str("valores"),
                Space(),
                Str("que"),
                Space(),
                Str("podem"),
                Space(),
                Str("ser"),
                Space(),
                Str("armazenados"),
                Space(),
                Str("em"),
                Space(),
                Str("variáveis"),
                Space(),
                Str("de"),
                Space(),
                Str("cada"),
                Space(),
                Str("tipo"),
                Space(),
                Str("depende"),
                Space(),
                Str("da"),
                Space(),
                Str("quantidade"),
                Space(),
                Str("de"),
                Space(),
                Str("memória"),
                Space(),
                Str("que"),
                Space(),
                Str("cada"),
                Space(),
                Str("tipo"),
                Space(),
                Str("utiliza."),
            ]
        ),
        Header(2, ("tipos", [], []), [Str("Tipos")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        Para([Str("Para"), Space(), Str("inteiros:")]),
        Table(
            [],
            [AlignDefault(), AlignDefault(), AlignDefault(), AlignDefault()],
            [0.0, 0.0, 0.0, 0.0],
            [
                [Plain([Str("Tipo"), Space(), Str("de"), Space(), Str("dado")])],
                [Plain([Str("Tamanho")])],
                [Plain([Str("valor"), Space(), Str("mínimo")])],
                [Plain([Str("valor"), Space(), Str("máximo")])],
            ],
            [
                [
                    [Plain([Str("byte")])],
                    [Plain([Str("1"), Space(), Str("byte")])],
                    [Plain([Str("-128")])],
                    [Plain([Str("127")])],
                ],
                [
                    [Plain([Str("short")])],
                    [Plain([Str("2"), Space(), Str("bytes")])],
                    [Plain([Str("-32768")])],
                    [Plain([Str("32767")])],
                ],
                [
                    [Plain([Str("int")])],
                    [Plain([Str("4"), Space(), Str("bytes")])],
                    [Plain([Str("-2147483648")])],
                    [Plain([Str("2147483647")])],
                ],
                [
                    [Plain([Str("long")])],
                    [Plain([Str("8"), Space(), Str("bytes")])],
                    [Plain([Str("-9223372036854775808")])],
                    [
                        Plain(
                            [
                                Str("9223372036854775807"),
                                Space(),
                                Note(
                                    [
                                        Para(
                                            [
                                                Str("nove"),
                                                Space(),
                                                Str("quintilhões,"),
                                                Space(),
                                                Str("duzentos"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("vinte"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("três"),
                                                Space(),
                                                Str("quatrilhões,"),
                                                Space(),
                                                Str("trezentos"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("setenta"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("dois"),
                                                Space(),
                                                Str("trilhões,"),
                                                Space(),
                                                Str("trinta"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("seis"),
                                                Space(),
                                                Str("bilhões"),
                                                Space(),
                                                Str(",oitocentos"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("cinquenta"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("quatro"),
                                                Space(),
                                                Str("milhões,"),
                                                Space(),
                                                Str("setecentos"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("setenta"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("cinco"),
                                                Space(),
                                                Str("mil,"),
                                                Space(),
                                                Str("oitocentos"),
                                                Space(),
                                                Str("e"),
                                                Space(),
                                                Str("sete."),
                                            ]
                                        )
                                    ]
                                ),
                            ]
                        )
                    ],
                ],
            ],
        ),
        Para([Str("Para"), Space(), Str("real:")]),
        Table(
            [],
            [AlignDefault(), AlignDefault()],
            [0.0, 0.0],
            [
                [Plain([Str("Tipo"), Space(), Str("de"), Space(), Str("dado")])],
                [Plain([Str("Tamanho")])],
            ],
            [
                [[Plain([Str("float")])], [Plain([Str("4"), Space(), Str("bytes")])]],
                [[Plain([Str("double")])], [Plain([Str("8"), Space(), Str("bytes")])]],
            ],
        ),
        Para([Str("para"), Space(), Str("lógico:")]),
        Table(
            [],
            [AlignDefault(), AlignDefault(), AlignDefault()],
            [0.0, 0.0, 0.0],
            [
                [Plain([Str("Tipo"), Space(), Str("de"), Space(), Str("dado")])],
                [Plain([Str("Tamanho")])],
                [Plain([Str("valores")])],
            ],
            [
                [
                    [Plain([Str("boolean")])],
                    [Plain([Str("1"), Space(), Str("bit")])],
                    [
                        Plain(
                            [
                                Code(("", [], []), "true"),
                                Space(),
                                Str("/"),
                                Space(),
                                Code(("", [], []), "false"),
                            ]
                        )
                    ],
                ]
            ],
        ),
        Para([Str("para"), Space(), Str("caractere:")]),
        Table(
            [],
            [AlignDefault(), AlignDefault(), AlignDefault()],
            [0.0, 0.0, 0.0],
            [
                [Plain([Str("Tipo"), Space(), Str("de"), Space(), Str("dado")])],
                [Plain([Str("Tamanho")])],
                [Plain([Str("descrição")])],
            ],
            [
                [
                    [Plain([Str("char")])],
                    [Plain([Str("2"), Space(), Str("bytes")])],
                    [
                        Plain(
                            [
                                Str("armazena"),
                                Space(),
                                Str("um"),
                                Space(),
                                Str("único"),
                                Space(),
                                Str("caractere"),
                            ]
                        )
                    ],
                ]
            ],
        ),
        Para(
            [
                Str("Fonte:"),
                Space(),
                Link(
                    ("", [], []),
                    [
                        Str("Oracle."),
                        Space(),
                        Str("Java"),
                        Space(),
                        Str("Language"),
                        Space(),
                        Str("Specification."),
                        Space(),
                        Str("Types,"),
                        Space(),
                        Str("Values"),
                        Space(),
                        Str("and"),
                        Space(),
                        Str("Variables:"),
                        Space(),
                        Str("4.2.1"),
                        Space(),
                        Str("Integral"),
                        Space(),
                        Str("Types"),
                        Space(),
                        Str("and"),
                        Space(),
                        Str("Values."),
                    ],
                    (
                        "https://docs.oracle.com/javase/specs/jls/se21/html/jls-4.html#jls-4.2",
                        "",
                    ),
                ),
            ]
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(
            2,
            ("mínimos-e-máximos-para-inteiro", [], []),
            [
                Str("Mínimos"),
                Space(),
                Str("e"),
                Space(),
                Str("máximos"),
                Space(),
                Str("para"),
                Space(),
                Str("inteiro"),
            ],
        ),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarValoresMinimosInteiro() {\n\n    byte var_byte = Byte.MIN_VALUE;\n    short var_short = Short.MIN_VALUE;\n    int var_int = Integer.MIN_VALUE;\n    long var_long = Long.MIN_VALUE;\n\n    System.out.println("Valores mínimos para inteiros: ");\n    System.out.println("    min byte  : " + var_byte);\n    System.out.println("    min short : " + var_short);\n    System.out.println("    min int   : " + var_int);\n    System.out.println("    min long  : " + var_long);\n\n}\n\npublic static void mostrarValoresMaximosInteiro() {\n\n    byte var_byte = Byte.MAX_VALUE;\n    short var_short = Short.MAX_VALUE;\n    int var_int = Integer.MAX_VALUE;\n    long var_long = Long.MAX_VALUE;\n\n    System.out.println("Valores máximos para inteiros: ");\n    System.out.println("    max byte  : " + var_byte);\n    System.out.println("    max short : " + var_short);\n    System.out.println("    max int   : " + var_int);\n    System.out.println("    max long  : " + var_long);\n\n}',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []),
            "Valores mínimos para inteiros: \n    min byte  : -128\n    min short : -32768\n    min int   : -2147483648\n    min long  : -9223372036854775808\nValores máximos para inteiros: \n    max byte  : 127\n    max short : 32767\n    max int   : 2147483647\n    max long  : 9223372036854775807",
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(
            2,
            ("mínimos-e-máximos-para-real", [], []),
            [
                Str("Mínimos"),
                Space(),
                Str("e"),
                Space(),
                Str("máximos"),
                Space(),
                Str("para"),
                Space(),
                Str("real"),
            ],
        ),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarValoresMinimosReal() {\n    float var_float = Float.MIN_VALUE;\n    double var_double = Double.MIN_VALUE;\n\n    System.out.println("Valores mínimos para real: ");\n    System.out.println("    min float  : " + var_float);\n    System.out.println("    min double : " + var_double);\n}\n\npublic static void mostrarValoresMaximosReal() {\n    float var_float = Float.MAX_VALUE;\n    double var_double = Double.MAX_VALUE;\n\n    System.out.println("Valores máximos para real: ");\n    System.out.println("    max float  : " + var_float);\n    System.out.println("    max double : " + var_double);\n}',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []),
            "Valores mínimos para real: \n    min float  : 1.4E-45\n    min double : 4.9E-324\nValores máximos para real: \n    max float  : 3.4028235E38\n    max double : 1.7976931348623157E308",
        ),
        Para(
            [
                Strong([Str("Observe")]),
                LineBreak(),
                Str("O"),
                Space(),
                Str("que"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("mínimo"),
                Space(),
                Str("significa"),
                Space(),
                Str("aqui?"),
            ]
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Para(
            [
                Str("Um"),
                Space(),
                Str("simulador"),
                Space(),
                Str("do"),
                Space(),
                Str("armazenamento"),
                Space(),
                Str("de"),
                Space(),
                Str("variáveis"),
                Space(),
                Str("pode"),
                Space(),
                Str("ser"),
                Space(),
                Str("conferido"),
                Space(),
                Str("na"),
                Space(),
                Str("em"),
                Space(),
                Cite(
                    [Citation("schmidt2024", [], [], NormalCitation(), 0, 0)],
                    [Str("[@schmidt2024]")],
                ),
                Str("."),
                Space(),
                Link(
                    ("", [], []),
                    [Str("Link:")],
                    ("https://www.h-schmidt.net/FloatConverter/IEEE754.html", ""),
                ),
            ]
        ),
        Header(2, ("overflow", [], []), [Str("Overflow")]),
        Para(
            [
                Str("Dizemos"),
                Space(),
                Str("que"),
                Space(),
                Str("existe"),
                Space(),
                Str("um"),
                Space(),
                Emph([Str("overflow")]),
                Space(),
                Str("quando"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("a"),
                Space(),
                Str("ser"),
                Space(),
                Str("armazenado"),
                Space(),
                Str("extrapola"),
                Space(),
                Str("(para"),
                Space(),
                Str("mais"),
                Space(),
                Str("ou"),
                Space(),
                Str("para"),
                Space(),
                Str("menos)"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("possível"),
                Space(),
                Str("de"),
                Space(),
                Str("ser"),
                Space(),
                Str("armazenado"),
                Space(),
                Str("utilizando"),
                Space(),
                Str("determinado"),
                Space(),
                Str("tipo"),
                Space(),
                Str("de"),
                Space(),
                Str("dado."),
            ]
        ),
        Para(
            [
                Str("Quando"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("extrapola"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("máximo"),
                Space(),
                Str("dizemos"),
                Space(),
                Str("que"),
                Space(),
                Str("existe"),
                Space(),
                Str("um"),
                Space(),
                Strong([Str("overflow"), Space(), Str("positivo")]),
                Str(","),
                Space(),
                Str("e"),
                Space(),
                Str("quando"),
                Space(),
                Str("extrapola"),
                Space(),
                Str("o"),
                Space(),
                Str("valor"),
                Space(),
                Str("mínimo"),
                Space(),
                Str("dizemos"),
                Space(),
                Str("que"),
                Space(),
                Str("ocorre"),
                Space(),
                Str("um"),
                Space(),
                Strong([Str("overflow"), Space(), Str("negativo")]),
                Space(),
                Str("(STALLINGS"),
                Space(),
                Str("2010"),
                Space(),
                Str("p.270)."),
            ]
        ),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarOverflowInteiro() {\n\n    byte var_byte = Byte.MAX_VALUE;\n    short var_short = Short.MAX_VALUE;\n    int var_int = Integer.MAX_VALUE;\n    long var_long = Long.MAX_VALUE;\n\n    var_byte++;\n    var_short++;\n    var_int++;\n    var_long++;\n\n    System.out.println("Valores máximos +1 para inteiros: ");\n    System.out.println("    max byte  : " + var_byte);\n    System.out.println("    max short : " + var_short);\n    System.out.println("    max int   : " + var_int);\n    System.out.println("    max long  : " + var_long);\n\n}',
        ),
        Para([Strong([Str("Saída:")])]),
        CodeBlock(
            ("", [], []),
            "Valores máximos +1 para inteiros: \n    max byte  : -128\n    max short : -32768\n    max int   : -2147483648\n    max long  : -9223372036854775808",
        ),
        Para(
            [
                Str(":::caution"),
                Space(),
                Str("Atenção"),
                SoftBreak(),
                Str("O"),
                Space(),
                Emph([Str("overflow")]),
                Space(),
                Str("é"),
                Space(),
                Str("um"),
                Space(),
                Str("erro"),
                Space(),
                Str("nos"),
                Space(),
                Str("valores,"),
                Space(),
                Str("e"),
                Space(),
                Str("portanto"),
                Space(),
                Str("deve-se"),
                Space(),
                Str("evitar"),
                Space(),
                Str("que"),
                Space(),
                Str("ele"),
                Space(),
                Str("ocorra."),
                Space(),
                Str("Por"),
                Space(),
                Str("isso,"),
                Space(),
                Str("deve-se"),
                Space(),
                Str("tomar"),
                Space(),
                Str("o"),
                Space(),
                Str("cuidado"),
                Space(),
                Str("ao"),
                Space(),
                Str("escolher"),
                Space(),
                Str("o"),
                Space(),
                Str("tipo"),
                Space(),
                Str("de"),
                Space(),
                Str("dado"),
                Space(),
                Str("a"),
                Space(),
                Str("ser"),
                Space(),
                Str("utilizado."),
                SoftBreak(),
                Str(":::"),
            ]
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(2, ("underflow", [], []), [Str("Underflow")]),
        Para(
            [
                Str("Para"),
                Space(),
                Str("os"),
                Space(),
                Str("valores"),
                Space(),
                Str("reais,"),
                Space(),
                Str("quando"),
                Space(),
                Str("um"),
                Space(),
                Str("valor"),
                Space(),
                Str("é"),
                Space(),
                Str("pequeno"),
                Space(),
                Str("o"),
                Space(),
                Str("suficiente"),
                Space(),
                Str("que"),
                Space(),
                Str("não"),
                Space(),
                Str("pode"),
                Space(),
                Str("ser"),
                Space(),
                Str("armazenado"),
                Space(),
                Str("dizemos"),
                Space(),
                Str("que"),
                Space(),
                Str("houve"),
                Space(),
                Str("um"),
                Space(),
                Strong([Str("underflow")]),
                Str("."),
            ]
        ),
        Header(2, ("literais", [], []), [Str("Literais")]),
        Para(
            [
                Str("Chamamos"),
                Space(),
                Str("de"),
                Space(),
                Str("literais"),
                Space(),
                Str("aos"),
                Space(),
                Str("valores"),
                Space(),
                Str("informados"),
                Space(),
                Str("diretamente"),
                Space(),
                Str("no"),
                Space(),
                Str("código,"),
                Space(),
                Str("de"),
                Space(),
                Str("maneira"),
                Space(),
                Str("explícita."),
            ]
        ),
        Header(3, ("inteiro", [], []), [Str("inteiro")]),
        Header(4, ("decimal", [], []), [Str("Decimal")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            ' public static void mostrarLiteraisInteiroDecimal() {\n    int var_int;\n    long var_long;\n\n    // Decimal\n    var_int = 10100;\n    var_long = 10100l; // l ou L para long\n\n    System.out.println("Valores em decimal: ");\n    System.out.println("    10100  : " + var_int);\n    System.out.println("    10100  : " + var_long);\n\n    }',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []), "Valores em decimal: \n    10100  : 10100\n    10100  : 10100"
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(4, ("hexadecimal", [], []), [Str("Hexadecimal")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarLiteraisInteiroHexadecimal() {\n    int var_int;\n    long var_long;\n\n    // Hexadecimal\n    var_int = 0x10100;\n    var_long = 0x10100l; // l ou L para long\n\n    System.out.println("Valores em hexadecimal: ");\n    System.out.println("    0x10100  : " + var_int);\n    System.out.println("    0x10100  : " + var_long);\n\n}',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []),
            "Valores em hexadecimal: \n    0x10100  : 65792\n    0x10100  : 65792",
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(4, ("binário", [], []), [Str("Binário")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarLiteraisInteiroBinario() {\n    int var_int;\n    long var_long;\n\n    // Binário\n    var_int = 0b10100;\n    var_long = 0b10100l; // l ou L para long\n\n    System.out.println("Valores em binário: ");\n    System.out.println("    0b10100  : " + var_int);\n    System.out.println("    0b10100  : " + var_long);\n\n    }',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []), "Valores em binário: \n    0b10100  : 20\n    0b10100  : 20"
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(3, ("real", [], []), [Str("real")]),
        Header(4, ("decimal-1", [], []), [Str("Decimal")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarLiteraisRealDecimal() {\n    float var_float;\n    double var_double;\n\n    // Decimais\n    var_float = 10100f;  // f ou F para float\n    var_double = 10100d; // d ou D para double\n\n    System.out.println("Valores em decimal: ");\n    System.out.println("    10100f  : " + var_float);\n    System.out.println("    10100d  : " + var_double);\n\n}',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []),
            "Valores em decimal: \n    10100f  : 10100.0\n    10100d  : 10100.0",
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(4, ("hexadecimal-1", [], []), [Str("Hexadecimal")]),
        Para(
            [
                RawInline(Format("html"), "<Tabs groupId='language'>"),
                SoftBreak(),
                RawInline(
                    Format("html"),
                    '<TabItem value="pseudocodigo" label="Pseudocódigo" default>',
                ),
            ]
        ),
        CodeBlock(("", ["c"], []), 'escreva("Olá Mundo");'),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="java" label="Java">'),
            ]
        ),
        CodeBlock(
            ("", ["javascript"], []),
            'public static void mostrarLiteraisRealHexadecimal() {\n    float var_float;\n    double var_double;\n\n    // Hexadecimal\n    // 0x <val hex> p <exp de 2>\n    var_float = 0x10.0P2f; // 0x10.0 * 2^2 = 16 * 4 = 64\n    var_double = 0x10.0P3d; // 0x10.0 * 2^3 = 16 * 8 = 128\n\n    System.out.println("Valores em hexadecimal: ");\n    System.out.println("    0x10.0P2f  : " + var_float);\n    System.out.println("    0x10.0P3d  : " + var_double);\n\n}',
        ),
        Para([Str("Saída:")]),
        CodeBlock(
            ("", [], []),
            "Valores em hexadecimal: \n    0x1p1f  : 64.0\n    0x1p1f  : 128.0",
        ),
        Para(
            [
                RawInline(Format("html"), "</TabItem>"),
                SoftBreak(),
                RawInline(Format("html"), '<TabItem value="python" label="Python">'),
            ]
        ),
        CodeBlock(("", ["python"], []), 'print("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), '<TabItem value="c" label="C">')]),
        CodeBlock(("", ["c"], []), 'printf("Olá Mundo")'),
        Para([RawInline(Format("html"), "</TabItem>")]),
        Para([RawInline(Format("html"), "</Tabs>")]),
        Header(2, ("referências", [], []), [Str("Referências")]),
        Para(
            [
                Link(
                    ("", [], []),
                    [
                        Str("Oracle."),
                        Space(),
                        Str("Java"),
                        Space(),
                        Str("Language"),
                        Space(),
                        Str("Specification."),
                        Space(),
                        Str("Types,"),
                        Space(),
                        Str("Values"),
                        Space(),
                        Str("and"),
                        Space(),
                        Str("Variables:"),
                        Space(),
                        Str("4.2.1"),
                        Space(),
                        Str("Integral"),
                        Space(),
                        Str("Types"),
                        Space(),
                        Str("and"),
                        Space(),
                        Str("Values."),
                    ],
                    (
                        "https://docs.oracle.com/javase/specs/jls/se21/html/jls-4.html#jls-4.2",
                        "",
                    ),
                )
            ]
        ),
        Para(
            [
                Str("STALLINGS,"),
                Space(),
                Str("William."),
                Space(),
                Str("Organização"),
                Space(),
                Str("e"),
                Space(),
                Str("Arquitetura"),
                Space(),
                Str("de"),
                Space(),
                Str("Computadores."),
                Space(),
                Str("8."),
                Space(),
                Str("ed.\xa0São"),
                Space(),
                Str("Paulo:"),
                Space(),
                Str("Pearson"),
                Space(),
                Str("Practice"),
                Space(),
                Str("Hall,"),
                Space(),
                Str("2010."),
            ]
        ),
    ],
)
