"use strict";(self.webpackChunkalgoritmos=self.webpackChunkalgoritmos||[]).push([[5062],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),S=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=S(e.components);return a.createElement(l.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=S(n),d=r,m=s["".concat(l,".").concat(d)]||s[d]||p[d]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[s]="string"==typeof e?e:r,o[1]=u;for(var S=2;S<i;S++)o[S]=n[S];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4400:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>S});var a=n(7462),r=(n(7294),n(3905));const i={},o="Preamble",u={unversionedId:"tmp/venv/lib/python3.8/site-packages/pandoc/tests",id:"tmp/venv/lib/python3.8/site-packages/pandoc/tests",title:"Preamble",description:"Pandoc (Haskell)",source:"@site/docs/tmp/venv/lib/python3.8/site-packages/pandoc/tests.md",sourceDirName:"tmp/venv/lib/python3.8/site-packages/pandoc",slug:"/tmp/venv/lib/python3.8/site-packages/pandoc/tests",permalink:"/materiais/docs/tmp/venv/lib/python3.8/site-packages/pandoc/tests",draft:!1,editUrl:"https://github.com/darlonv/algoritmos/tree/main/docs/tmp/venv/lib/python3.8/site-packages/pandoc/tests.md",tags:[],version:"current",frontMatter:{}},l={},S=[{value:"Pandoc (Haskell)",id:"pandoc-haskell",level:2},{value:"Imports",id:"imports",level:2},{value:"Paragraphs",id:"paragraphs",level:2},{value:"Extension: <code>escaped_line_breaks</code>",id:"extension-escaped_line_breaks",level:4},{value:"Headers",id:"headers",level:2},{value:"Setext-style headers",id:"setext-style-headers",level:3},{value:"ATX-style headers",id:"atx-style-headers",level:3},{value:"Extension: <code>blank_before_header</code>",id:"extension-blank_before_header",level:4},{value:"Header identifiers",id:"header-identifiers",level:2},{value:"Extension: <code>header_attributes</code>",id:"extension-header_attributes",level:4},{value:"Extension: <code>auto_identifiers</code>",id:"extension-auto_identifiers",level:4},{value:"Extension: <code>implicit_header_references</code>",id:"extension-implicit_header_references",level:4},{value:"Block quotations",id:"block-quotations",level:2},{value:"Extension: <code>blank_before_blockquote</code>",id:"extension-blank_before_blockquote",level:4},{value:"Verbatim (code) blocks",id:"verbatim-code-blocks",level:2},{value:"Indented code blocks",id:"indented-code-blocks",level:3},{value:"Fenced code blocks",id:"fenced-code-blocks",level:3},{value:"Extension: <code>fenced_code_blocks</code>",id:"extension-fenced_code_blocks",level:4},{value:"Extension: <code>backtick_code_blocks</code>",id:"extension-backtick_code_blocks",level:4},{value:"Extension: <code>fenced_code_attributes</code>",id:"extension-fenced_code_attributes",level:4},{value:"Line blocks",id:"line-blocks",level:2},{value:"Extension: <code>line_blocks</code>",id:"extension-line_blocks",level:4},{value:"Lists",id:"lists",level:2},{value:"Bullet lists",id:"bullet-lists",level:3},{value:"Extension: <code>fancy_lists</code>",id:"extension-fancy_lists",level:4},{value:"Extension: <code>start_num</code>",id:"extension-start_num",level:4},{value:"Definition Lists",id:"definition-lists",level:3},{value:"Extension: <code>definition_lists</code>",id:"extension-definition_lists",level:4},{value:"Numbered Example List",id:"numbered-example-list",level:3},{value:"Extension: <code>example_lists</code>",id:"extension-example_lists",level:4},{value:"Compact and loose lists",id:"compact-and-loose-lists",level:3},{value:"Ending a List",id:"ending-a-list",level:3},{value:"Horizontal Rules",id:"horizontal-rules",level:2},{value:"Tables",id:"tables",level:2},{value:"Extension <code>table_captions</code>",id:"extension-table_captions",level:4},{value:"Extension <code>simple_tables</code>",id:"extension-simple_tables",level:4},{value:"Extension <code>multiline_tables</code>",id:"extension-multiline_tables",level:4},{value:"Extension: grid_tables",id:"extension-grid_tables",level:4},{value:"Extension: pipe_tables",id:"extension-pipe_tables",level:4},{value:"Metadata blocks",id:"metadata-blocks",level:2},{value:"Extension: <code>pandoc_title_block</code>",id:"extension-pandoc_title_block",level:4},{value:"Extension: <code>yaml_metadata_block</code>",id:"extension-yaml_metadata_block",level:4},{value:"Backslash escapes",id:"backslash-escapes",level:2},{value:"Extension: <code>all_symbols_escapable</code>",id:"extension-all_symbols_escapable",level:4},{value:"Smart punctuation",id:"smart-punctuation",level:2},{value:"Extension",id:"extension",level:4},{value:"Inline Formatting",id:"inline-formatting",level:2},{value:"Emphasis",id:"emphasis",level:3},{value:"Extension: <code>intraword_underscores</code>",id:"extension-intraword_underscores",level:4},{value:"Strikeout",id:"strikeout",level:3},{value:"Extension: <code>strikeout</code>",id:"extension-strikeout",level:4},{value:"Superscripts and Subscripts",id:"superscripts-and-subscripts",level:3},{value:"Extension: <code>superscript</code>, <code>subscript</code>",id:"extension-superscript-subscript",level:4},{value:"Verbatim",id:"verbatim",level:3},{value:"Extension: <code>inline_code_attributes</code>",id:"extension-inline_code_attributes",level:4},{value:"Small Caps",id:"small-caps",level:3},{value:"Math",id:"math",level:2},{value:"Extension: <code>tex_math_dollars</code>",id:"extension-tex_math_dollars",level:4},{value:"Raw HTML",id:"raw-html",level:2},{value:"Extension: <code>raw_html</code>",id:"extension-raw_html",level:4},{value:"Extension: <code>markdown_in_html_blocks</code>",id:"extension-markdown_in_html_blocks",level:4},{value:"Extension: <code>native_divs</code>",id:"extension-native_divs",level:4},{value:"Extension: <code>native_spans</code>",id:"extension-native_spans",level:4},{value:"Raw TeX",id:"raw-tex",level:2},{value:"Extension: <code>raw_tex</code>",id:"extension-raw_tex",level:4},{value:"LaTeX macros",id:"latex-macros",level:2},{value:"Extension: <code>latex_macros</code>",id:"extension-latex_macros",level:4},{value:"Links",id:"links",level:2},{value:"Automatic Links",id:"automatic-links",level:3},{value:"Inline links",id:"inline-links",level:3},{value:"Reference links",id:"reference-links",level:3},{value:"Extension: <code>shortcut_reference_links</code>",id:"extension-shortcut_reference_links",level:4},{value:"Internal links",id:"internal-links",level:3},{value:"Images",id:"images",level:2},{value:"Extension: <code>implicit_figures</code>",id:"extension-implicit_figures",level:4},{value:"Extension: link_attributes",id:"extension-link_attributes",level:3},{value:"Footnotes",id:"footnotes",level:2},{value:"Extension: <code>footnotes</code>",id:"extension-footnotes",level:4},{value:"Extension: <code>inline_notes</code>",id:"extension-inline_notes",level:4},{value:"Citations",id:"citations",level:2},{value:"Extension: <code>citations</code>",id:"extension-citations",level:4}],c={toc:S},s="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"preamble"},"Preamble"),(0,r.kt)("h2",{id:"pandoc-haskell"},"Pandoc (Haskell)"),(0,r.kt)("p",null,"This test suite requires pandoc 1.16:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> from subprocess import Popen, PIPE\n>>> p = Popen(["pandoc", "-v"], stdout=PIPE)\n>>> if b"pandoc 1.16" not in p.communicate()[0]:\n...     raise RuntimeError("pandoc 1.16 not found")\n')),(0,r.kt)("h2",{id:"imports"},"Imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> from pandoc.types import *\n>>> import pandoc\n")),(0,r.kt)("h1",{id:"pandoc-test-suite"},"Pandoc Test Suite"),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"http://pandoc.org/README.html"},"Pandoc's User Guide")),(0,r.kt)("h2",{id:"paragraphs"},"Paragraphs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... a paragraph\n...\n... another paragraph\n... \"\"\" \n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'a'), Space(), Str(u'paragraph')]), Para([St\nr(u'another'), Space(), Str(u'paragraph')])])\n\n>>> \"a paragraph  \\nanother paragraph\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'a'), Space(), Str(u'paragraph'), LineBreak(\n), Str(u'another'), Space(), Str(u'paragraph')])])\n")),(0,r.kt)("h4",{id:"extension-escaped_line_breaks"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"escaped_line_breaks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> r\"\"\"\n... a paragraph\\\n... another paragraph\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'a'), Space(), Str(u'paragraph'), LineBreak(\n), Str(u'another'), Space(), Str(u'paragraph')])])\n")),(0,r.kt)("h2",{id:"headers"},"Headers"),(0,r.kt)("h3",{id:"setext-style-headers"},"Setext-style headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... A level-one header\n... ==================\n... \n... A level-two header\n... ------------------\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'a-level-one-header', [], []), [Str(u'A'), \nSpace(), Str(u'level-one'), Space(), Str(u'header')]), Header(2, (u'a-level-\ntwo-header', [], []), [Str(u'A'), Space(), Str(u'level-two'), Space(), Str(u\n'header')])])\n")),(0,r.kt)("h3",{id:"atx-style-headers"},"ATX-style headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ## A level-two header\n... \n... ### A level-three header ###\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(2, (u'a-level-two-header', [], []), [Str(u'A'), \nSpace(), Str(u'level-two'), Space(), Str(u'header')]), Header(3, (u'a-level-\nthree-header', [], []), [Str(u'A'), Space(), Str(u'level-three'), Space(), S\ntr(u'header')])])\n\n>>> \"# A level-one header with a [link](/url) and *emphasis*\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'a-level-one-header-with-a-link-and-emphasi\ns', [], []), [Str(u'A'), Space(), Str(u'level-one'), Space(), Str(u'header')\n, Space(), Str(u'with'), Space(), Str(u'a'), Space(), Link((u'', [], []), [S\ntr(u'link')], (u'/url', u'')), Space(), Str(u'and'), Space(), Emph([Str(u'em\nphasis')])])])\n")),(0,r.kt)("h4",{id:"extension-blank_before_header"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"blank_before_header")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... I like several of their flavors of ice cream:\n... #22, for example, and #5.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'I'), Space(), Str(u'like'), Space(), Str(u'\nseveral'), Space(), Str(u'of'), Space(), Str(u'their'), Space(), Str(u'flavo\nrs'), Space(), Str(u'of'), Space(), Str(u'ice'), Space(), Str(u'cream:'), So\nftBreak(), Str(u'#22,'), Space(), Str(u'for'), Space(), Str(u'example,'), Sp\nace(), Str(u'and'), Space(), Str(u'#5.')])])\n")),(0,r.kt)("h2",{id:"header-identifiers"},"Header identifiers"),(0,r.kt)("h4",{id:"extension-header_attributes"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"header_attributes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... # My header {#foo}\n... \n... ## My header ##    {#foo}\n... \n... My other header   {#foo}\n... ---------------\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'foo', [], []), [Str(u'My'), Space(), Str(u\n'header')]), Header(2, (u'foo', [], []), [Str(u'My'), Space(), Str(u'header'\n)]), Header(2, (u'foo', [], []), [Str(u'My'), Space(), Str(u'other'), Space(\n), Str(u'header')])])\n\n>>> \"# My header {-}\" # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'my-header', [u'unnumbered'], []), [Str(u'M\ny'), Space(), Str(u'header')])])\n\n>>> \"# My header {.unnumbered}\" # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'my-header', [u'unnumbered'], []), [Str(u'M\ny'), Space(), Str(u'header')])])\n")),(0,r.kt)("h4",{id:"extension-auto_identifiers"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"auto_identifiers")),(0,r.kt)("p",null,"This extension does not work for the JSON output format."),(0,r.kt)("h4",{id:"extension-implicit_header_references"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"implicit_header_references")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... # Header Identifiers\n... \n... [header identifiers](#header-identifiers),\n... [header identifiers],\n... [header identifiers][],\n... [the section on header identifiers][header identifiers]\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'header-identifiers', [], []), [Str(u'Heade\nr'), Space(), Str(u'Identifiers')]), Para([Link((u'', [], []), [Str(u'header\n'), Space(), Str(u'identifiers')], (u'#header-identifiers', u'')), Str(u',')\n, SoftBreak(), Link((u'', [], []), [Str(u'header'), Space(), Str(u'identifie\nrs')], (u'#header-identifiers', u'')), Str(u','), SoftBreak(), Link((u'', []\n, []), [Str(u'header'), Space(), Str(u'identifiers')], (u'#header-identifier\ns', u'')), Str(u','), SoftBreak(), Link((u'', [], []), [Str(u'the'), Space()\n, Str(u'section'), Space(), Str(u'on'), Space(), Str(u'header'), Space(), St\nr(u'identifiers')], (u'#header-identifiers', u''))])])\n\n>>> \"\"\"\n... # Foo\n... \n... [foo]: bar\n... \n... See [foo]\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Header(1, (u'foo', [], []), [Str(u'Foo')]), Para([Str(u\n'See'), Space(), Link((u'', [], []), [Str(u'foo')], (u'bar', u''))])])\n")),(0,r.kt)("h2",{id:"block-quotations"},"Block quotations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... > This is a block quote. This\n... > paragraph has two lines.\n... >\n... > 1. This is a list inside a block quote.\n... > 2. Second item.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([Para([Str(u'This'), Space(), Str(u'is'), Sp\nace(), Str(u'a'), Space(), Str(u'block'), Space(), Str(u'quote.'), Space(), \nStr(u'This'), SoftBreak(), Str(u'paragraph'), Space(), Str(u'has'), Space(),\n Str(u'two'), Space(), Str(u'lines.')]), OrderedList((1, Decimal(), Period()\n), [[Plain([Str(u'This'), Space(), Str(u'is'), Space(), Str(u'a'), Space(), \nStr(u'list'), Space(), Str(u'inside'), Space(), Str(u'a'), Space(), Str(u'bl\nock'), Space(), Str(u'quote.')])], [Plain([Str(u'Second'), Space(), Str(u'it\nem.')])]])])])\n\n>>> \"\"\"\n... > This is a block quote. This\n... paragraph has two lines.\n... \n... > 1. This is a list inside a block quote.\n... 2. Second item.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([Para([Str(u'This'), Space(), Str(u'is'), Sp\nace(), Str(u'a'), Space(), Str(u'block'), Space(), Str(u'quote.'), Space(), \nStr(u'This'), SoftBreak(), Str(u'paragraph'), Space(), Str(u'has'), Space(),\n Str(u'two'), Space(), Str(u'lines.')])]), BlockQuote([OrderedList((1, Decim\nal(), Period()), [[Plain([Str(u'This'), Space(), Str(u'is'), Space(), Str(u'\na'), Space(), Str(u'list'), Space(), Str(u'inside'), Space(), Str(u'a'), Spa\nce(), Str(u'block'), Space(), Str(u'quote.')])], [Plain([Str(u'Second'), Spa\nce(), Str(u'item.')])]])])])\n\n>>> \"\"\"\n... > This is a block quote.\n... >\n... > > A block quote within a block quote.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([Para([Str(u'This'), Space(), Str(u'is'), Sp\nace(), Str(u'a'), Space(), Str(u'block'), Space(), Str(u'quote.')]), BlockQu\note([Para([Str(u'A'), Space(), Str(u'block'), Space(), Str(u'quote'), Space(\n), Str(u'within'), Space(), Str(u'a'), Space(), Str(u'block'), Space(), Str(\nu'quote.')])])])])\n\n>>> \">     code\" # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([CodeBlock((u'', [], []), u'code')])])\n")),(0,r.kt)("h4",{id:"extension-blank_before_blockquote"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"blank_before_blockquote")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... > This is a block quote.\n... >> Nested.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([Para([Str(u'This'), Space(), Str(u'is'), Sp\nace(), Str(u'a'), Space(), Str(u'block'), Space(), Str(u'quote.'), SoftBreak\n(), Str(u'>'), Space(), Str(u'Nested.')])])])\n")),(0,r.kt)("h2",{id:"verbatim-code-blocks"},"Verbatim (code) blocks"),(0,r.kt)("h3",{id:"indented-code-blocks"},"Indented code blocks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n...     if (a > 3) {\n...     moveShip(5 * gravity, DOWN);\n...     }\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u\'\', [], []), u\'if (a > 3) {\\nmoveShip(5 * g\nravity, DOWN);\\n}\')])\n')),(0,r.kt)("h3",{id:"fenced-code-blocks"},"Fenced code blocks"),(0,r.kt)("h4",{id:"extension-fenced_code_blocks"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"fenced_code_blocks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n... ~~~~~~~\n... if (a > 3) {\n... moveShip(5 * gravity, DOWN);\n... }\n... ~~~~~~~\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u\'\', [], []), u\'if (a > 3) {\\nmoveShip(5 * g\nravity, DOWN);\\n}\')])\n\n>>> """\n... ~~~~~~~~~~~~~~~~\n... ~~~~~~~~~~\n... code including tildes\n... ~~~~~~~~~~\n... ~~~~~~~~~~~~~~~~\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u\'\', [], []), u\'~~~~~~~~~~\\ncode including t\nildes\\n~~~~~~~~~~\')])\n')),(0,r.kt)("h4",{id:"extension-backtick_code_blocks"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"backtick_code_blocks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n... ```````\n... if (a > 3) {\n... moveShip(5 * gravity, DOWN);\n... }\n... ```````\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u\'\', [], []), u\'if (a > 3) {\\nmoveShip(5 * g\nravity, DOWN);\\n}\')])\n')),(0,r.kt)("h4",{id:"extension-fenced_code_attributes"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"fenced_code_attributes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ~~~~ {#mycode .haskell .numberLines startFrom=\"100\"}\n... qsort []\n... = []\n... qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++\n... qsort (filter (>= x) xs)\n... ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u'mycode', [u'haskell', u'numberLines'], [(u\n'startFrom', u'100')]), u'qsort []\\n= []\\nqsort (x:xs) = qsort (filter (< x)\n xs) ++ [x] ++\\nqsort (filter (>= x) xs)')])\n\n>>> \"\"\"\n... ```haskell\n... qsort [] = []\n... ```\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u'', [u'haskell'], []), u'qsort [] = []')])\n\n>>> \"\"\"\n... ``` {.haskell}\n... qsort [] = []\n... ```\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [CodeBlock((u'', [u'haskell'], []), u'qsort [] = []')])\n")),(0,r.kt)("h2",{id:"line-blocks"},"Line blocks"),(0,r.kt)("h4",{id:"extension-line_blocks"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"line_blocks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... | The limerick packs laughs anatomical\n... | In space that is quite economical.\n... |    But the good ones I've seen\n... |    So seldom are clean\n... | And the clean ones so seldom are comical\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'The'), Space(), Str(u'limerick'), Space(), \nStr(u'packs'), Space(), Str(u'laughs'), Space(), Str(u'anatomical'), LineBre\nak(), Str(u'In'), Space(), Str(u'space'), Space(), Str(u'that'), Space(), St\nr(u'is'), Space(), Str(u'quite'), Space(), Str(u'economical.'), LineBreak(),\n Str(u'\\xa0\\xa0\\xa0But'), Space(), Str(u'the'), Space(), Str(u'good'), Space\n(), Str(u'ones'), Space(), Str(u\"I've\"), Space(), Str(u'seen'), LineBreak(),\n Str(u'\\xa0\\xa0\\xa0So'), Space(), Str(u'seldom'), Space(), Str(u'are'), Spac\ne(), Str(u'clean'), LineBreak(), Str(u'And'), Space(), Str(u'the'), Space(),\n Str(u'clean'), Space(), Str(u'ones'), Space(), Str(u'so'), Space(), Str(u's\neldom'), Space(), Str(u'are'), Space(), Str(u'comical')])])\n\n>>> \"\"\"\n... | 200 Main St.\n... | Berkeley, CA 94718\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'200'), Space(), Str(u'Main'), Space(), Str(\nu'St.'), LineBreak(), Str(u'Berkeley,'), Space(), Str(u'CA'), Space(), Str(u\n'94718')])])\n\n>>> \"\"\"\n... | The Right Honorable Most Venerable and Righteous Samuel L.\n...   Constable, Jr.\n... | 200 Main St.\n... | Berkeley, CA 94718\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'The'), Space(), Str(u'Right'), Space(), Str\n(u'Honorable'), Space(), Str(u'Most'), Space(), Str(u'Venerable'), Space(), \nStr(u'and'), Space(), Str(u'Righteous'), Space(), Str(u'Samuel'), Space(), S\ntr(u'L.'), Space(), Str(u'Constable,'), Space(), Str(u'Jr.'), LineBreak(), S\ntr(u'200'), Space(), Str(u'Main'), Space(), Str(u'St.'), LineBreak(), Str(u'\nBerkeley,'), Space(), Str(u'CA'), Space(), Str(u'94718')])])\n")),(0,r.kt)("h2",{id:"lists"},"Lists"),(0,r.kt)("h3",{id:"bullet-lists"},"Bullet lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... * one\n... * two\n... * three\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'one')])], [Plain([Str(u'two')\n])], [Plain([Str(u'three')])]])])\n\n>>> \"\"\"\n... * one\n...\n... * two\n...\n... * three\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Para([Str(u'one')])], [Para([Str(u'two')])\n], [Para([Str(u'three')])]])])\n\n\n>>> \"\"\"\n... * here is my first\n... list item.\n... * and my second.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'here'), Space(), Str(u'is'), \nSpace(), Str(u'my'), Space(), Str(u'first'), SoftBreak(), Str(u'list'), Spac\ne(), Str(u'item.')])], [Plain([Str(u'and'), Space(), Str(u'my'), Space(), St\nr(u'second.')])]])])\n\n\n>>> \"\"\"\n... * here is my first\n... list item.\n... * and my second.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'here'), Space(), Str(u'is'), \nSpace(), Str(u'my'), Space(), Str(u'first'), SoftBreak(), Str(u'list'), Spac\ne(), Str(u'item.')])], [Plain([Str(u'and'), Space(), Str(u'my'), Space(), St\nr(u'second.')])]])])\n\n>>> \"\"\"\n...   * First paragraph.\n...\n...   Continued.\n...\n...   * Second paragraph. With a code block, which must be indented\n...     eight spaces:\n...\n...         { code }\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'First'), Space(), Str(u'parag\nraph.')])]]), Para([Str(u'Continued.')]), BulletList([[Para([Str(u'Second'),\n Space(), Str(u'paragraph.'), Space(), Str(u'With'), Space(), Str(u'a'), Spa\nce(), Str(u'code'), Space(), Str(u'block,'), Space(), Str(u'which'), Space()\n, Str(u'must'), Space(), Str(u'be'), Space(), Str(u'indented'), SoftBreak(),\n Str(u'eight'), Space(), Str(u'spaces:')]), CodeBlock((u'', [], []), u'{ cod\ne }')]])])\n\n>>> \"\"\"\n... * fruits\n...     + apples\n...         - macintosh\n...         - red delicious\n...     + pears\n...     + peaches\n... * vegetables\n...     + broccoli\n...     + chard\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'fruits')]), BulletList([[Plai\nn([Str(u'apples')]), BulletList([[Plain([Str(u'macintosh')])], [Plain([Str(u\n'red'), Space(), Str(u'delicious')])]])], [Plain([Str(u'pears')])], [Plain([\nStr(u'peaches')])]])], [Plain([Str(u'vegetables')]), BulletList([[Plain([Str\n(u'broccoli')])], [Plain([Str(u'chard')])]])]])])\n\n>>> \"\"\"\n... + A lazy, lazy, list\n... item.\n...\n... + Another one; this looks\n... bad but is legal.\n...\n...     Second paragraph of second\n... list item.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Para([Str(u'A'), Space(), Str(u'lazy,'), S\npace(), Str(u'lazy,'), Space(), Str(u'list'), SoftBreak(), Str(u'item.')])],\n [Para([Str(u'Another'), Space(), Str(u'one;'), Space(), Str(u'this'), Space\n(), Str(u'looks'), SoftBreak(), Str(u'bad'), Space(), Str(u'but'), Space(), \nStr(u'is'), Space(), Str(u'legal.')]), Para([Str(u'Second'), Space(), Str(u'\nparagraph'), Space(), Str(u'of'), Space(), Str(u'second'), SoftBreak(), Str(\nu'list'), Space(), Str(u'item.')])]])])\n\n>>> \"\"\"\n... 1.  one\n... 2.  two\n... 3.  three\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((1, Decimal(), Period()), [[Plain([Str(u'on\ne')])], [Plain([Str(u'two')])], [Plain([Str(u'three')])]])])\n\n>>> \"\"\"\n... 5.  one\n... 7.  two\n... 1.  three\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((5, Decimal(), Period()), [[Plain([Str(u'on\ne')])], [Plain([Str(u'two')])], [Plain([Str(u'three')])]])])\n")),(0,r.kt)("h4",{id:"extension-fancy_lists"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"fancy_lists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n... #. one\n... #. two\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plai\nn([Str(u\'one\')])], [Plain([Str(u\'two\')])]])])\n')),(0,r.kt)("h4",{id:"extension-start_num"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"start_num")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n...  9)  Ninth\n...  10)  Tenth\n...  11)  Eleventh\n...         i. subone\n...        ii. subtwo\n...       iii. subthree\n...  \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((9, Decimal(), OneParen()), [[Plain([Str(u'\nNinth')])], [Plain([Str(u'Tenth')])], [Plain([Str(u'Eleventh'), SoftBreak(),\n Str(u'i.'), Space(), Str(u'subone')]), OrderedList((2, LowerRoman(), Period\n()), [[Plain([Str(u'subtwo')])], [Plain([Str(u'subthree')])]])]])])\n\n>>> \"\"\"\n... (2) Two\n... (5) Three\n... 1.  Four\n... *   Five\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((2, Decimal(), TwoParens()), [[Plain([Str(u\n'Two')])], [Plain([Str(u'Three')])]]), OrderedList((1, Decimal(), Period()),\n [[Plain([Str(u'Four')])]]), BulletList([[Plain([Str(u'Five')])]])])\n")),(0,r.kt)("h3",{id:"definition-lists"},"Definition Lists"),(0,r.kt)("h4",{id:"extension-definition_lists"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"definition_lists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... Term 1\n... \n... :   Definition 1\n... \n... Term 2 with *inline markup*\n... \n... :   Definition 2\n... \n...         { some code, part of Definition 2 }\n... \n...     Third paragraph of definition 2.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [DefinitionList([([Str(u'Term'), Space(), Str(u'1')], [[\nPara([Str(u'Definition'), Space(), Str(u'1')])]]), ([Str(u'Term'), Space(), \nStr(u'2'), Space(), Str(u'with'), Space(), Emph([Str(u'inline'), Space(), St\nr(u'markup')])], [[Para([Str(u'Definition'), Space(), Str(u'2')]), CodeBlock\n((u'', [], []), u'{ some code, part of Definition 2 }'), Para([Str(u'Third')\n, Space(), Str(u'paragraph'), Space(), Str(u'of'), Space(), Str(u'definition\n'), Space(), Str(u'2.')])]])])])\n\n\n>>> \"\"\"\n... Term 1\n... \n... :   Definition\n... with lazy continuation.\n... \n...     Second paragraph of the definition.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [DefinitionList([([Str(u'Term'), Space(), Str(u'1')], [[\nPara([Str(u'Definition'), SoftBreak(), Str(u'with'), Space(), Str(u'lazy'), \nSpace(), Str(u'continuation.')]), Para([Str(u'Second'), Space(), Str(u'parag\nraph'), Space(), Str(u'of'), Space(), Str(u'the'), Space(), Str(u'definition\n.')])]])])])\n\n>>> \"\"\"\n... Term 1\n...   ~ Definition 1\n... \n... Term 2\n...   ~ Definition 2a\n...   ~ Definition 2b\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [DefinitionList([([Str(u'Term'), Space(), Str(u'1')], [[\nPlain([Str(u'Definition'), Space(), Str(u'1')])]]), ([Str(u'Term'), Space(),\n Str(u'2')], [[Plain([Str(u'Definition'), Space(), Str(u'2a')])], [Plain([St\nr(u'Definition'), Space(), Str(u'2b')])]])])])\n")),(0,r.kt)("h3",{id:"numbered-example-list"},"Numbered Example List"),(0,r.kt)("h4",{id:"extension-example_lists"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"example_lists")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... (@)  My first example will be numbered (1).\n... (@)  My second example will be numbered (2).\n... \n... Explanation of examples.\n... \n... (@)  My third example will be numbered (3).\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((1, Example(), TwoParens()), [[Plain([Str(u\n'My'), Space(), Str(u'first'), Space(), Str(u'example'), Space(), Str(u'will\n'), Space(), Str(u'be'), Space(), Str(u'numbered'), Space(), Str(u'(1).')])]\n, [Plain([Str(u'My'), Space(), Str(u'second'), Space(), Str(u'example'), Spa\nce(), Str(u'will'), Space(), Str(u'be'), Space(), Str(u'numbered'), Space(),\n Str(u'(2).')])]]), Para([Str(u'Explanation'), Space(), Str(u'of'), Space(),\n Str(u'examples.')]), OrderedList((3, Example(), TwoParens()), [[Plain([Str(\nu'My'), Space(), Str(u'third'), Space(), Str(u'example'), Space(), Str(u'wil\nl'), Space(), Str(u'be'), Space(), Str(u'numbered'), Space(), Str(u'(3).')])\n]])])\n\n>>> \"\"\"\n... (@good)  This is a good example.\n... \n... As (@good) illustrates, ...\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((1, Example(), TwoParens()), [[Plain([Str(u\n'This'), Space(), Str(u'is'), Space(), Str(u'a'), Space(), Str(u'good'), Spa\nce(), Str(u'example.')])]]), Para([Str(u'As'), Space(), Str(u'(1)'), Space()\n, Str(u'illustrates,'), Space(), Str(u'...')])])\n")),(0,r.kt)("h3",{id:"compact-and-loose-lists"},"Compact and loose lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... +   First\n... +   Second:\n...     -   Fee\n...     -   Fie\n...     -   Foe\n... \n... +   Third\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'First')])], [Plain([Str(u'Sec\nond:')]), BulletList([[Plain([Str(u'Fee')])], [Plain([Str(u'Fie')])], [Plain\n([Str(u'Foe')])]])], [Plain([Str(u'Third')])]])])\n")),(0,r.kt)("h3",{id:"ending-a-list"},"Ending a List"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... -   item one\n... -   item two\n... \n...     { my code block }\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'item'), Space(), Str(u'one')]\n)], [Para([Str(u'item'), Space(), Str(u'two')]), Para([Str(u'{'), Space(), S\ntr(u'my'), Space(), Str(u'code'), Space(), Str(u'block'), Space(), Str(u'}')\n])]])])\n\n>>> \"\"\"\n... -   item one\n... -   item two\n... \n... \x3c!-- end of list --\x3e\n... \n...     { my code block }\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BulletList([[Plain([Str(u'item'), Space(), Str(u'one')]\n)], [Plain([Str(u'item'), Space(), Str(u'two')])]]), RawBlock(Format(u'html'\n), u'\x3c!-- end of list --\x3e'), CodeBlock((u'', [], []), u'{ my code block }')]\n)\n\n>>> \"\"\"\n... 1.  one\n... 2.  two\n... 3.  three\n... \n... \x3c!-- --\x3e\n... \n... 1.  uno\n... 2.  dos\n... 3.  tres\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [OrderedList((1, Decimal(), Period()), [[Plain([Str(u'on\ne')])], [Plain([Str(u'two')])], [Plain([Str(u'three')])]]), RawBlock(Format(\nu'html'), u'\x3c!-- --\x3e'), OrderedList((1, Decimal(), Period()), [[Plain([Str(u\n'uno')])], [Plain([Str(u'dos')])], [Plain([Str(u'tres')])]])])\n")),(0,r.kt)("h2",{id:"horizontal-rules"},"Horizontal Rules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n... *  *  *  *\n...\n... ---------------\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [HorizontalRule(), HorizontalRule()])\n')),(0,r.kt)("h2",{id:"tables"},"Tables"),(0,r.kt)("h4",{id:"extension-table_captions"},"Extension ",(0,r.kt)("inlineCode",{parentName:"h4"},"table_captions")),(0,r.kt)("h4",{id:"extension-simple_tables"},"Extension ",(0,r.kt)("inlineCode",{parentName:"h4"},"simple_tables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n...   Right     Left     Center     Default\n... -------     ------ ----------   -------\n...      12     12        12            12\n...     123     123       123          123\n...       1     1          1             1\n...\n... Table:  Demonstration of simple table syntax.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([Str(u'Demonstration'), Space(), Str(u'of'), Spac\ne(), Str(u'simple'), Space(), Str(u'table'), Space(), Str(u'syntax.')], [Ali\ngnRight(), AlignLeft(), AlignCenter(), AlignDefault()], [0.0, 0.0, 0.0, 0.0]\n, [[Plain([Str(u'Right')])], [Plain([Str(u'Left')])], [Plain([Str(u'Center')\n])], [Plain([Str(u'Default')])]], [[[Plain([Str(u'12')])], [Plain([Str(u'12'\n)])], [Plain([Str(u'12')])], [Plain([Str(u'12')])]], [[Plain([Str(u'123')])]\n, [Plain([Str(u'123')])], [Plain([Str(u'123')])], [Plain([Str(u'123')])]], [\n[Plain([Str(u'1')])], [Plain([Str(u'1')])], [Plain([Str(u'1')])], [Plain([St\nr(u'1')])]]])])\n\n>>> \"\"\"\n... -------     ------ ----------   -------\n...      12     12        12             12\n...     123     123       123           123\n...       1     1          1              1\n... -------     ------ ----------   -------\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([], [AlignRight(), AlignLeft(), AlignCenter(), Al\nignRight()], [0.0, 0.0, 0.0, 0.0], [[], [], [], []], [[[Plain([Str(u'12')])]\n, [Plain([Str(u'12')])], [Plain([Str(u'12')])], [Plain([Str(u'12')])]], [[Pl\nain([Str(u'123')])], [Plain([Str(u'123')])], [Plain([Str(u'123')])], [Plain(\n[Str(u'123')])]], [[Plain([Str(u'1')])], [Plain([Str(u'1')])], [Plain([Str(u\n'1')])], [Plain([Str(u'1')])]]])])\n")),(0,r.kt)("h4",{id:"extension-multiline_tables"},"Extension ",(0,r.kt)("inlineCode",{parentName:"h4"},"multiline_tables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... -------------------------------------------------------------\n...  Centered   Default           Right Left\n...   Header    Aligned         Aligned Aligned\n... ----------- ------- --------------- -------------------------\n...    First    row                12.0 Example of a row that\n...                                     spans multiple lines.\n... \n...   Second    row                 5.0 Here's another one. Note\n...                                     the blank line between\n...                                     rows.\n... -------------------------------------------------------------\n... \n... Table: Here's the caption. It, too, may span\n... multiple lines.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([Str(u\"Here's\"), Space(), Str(u'the'), Space(), S\ntr(u'caption.'), Space(), Str(u'It,'), Space(), Str(u'too,'), Space(), Str(u\n'may'), Space(), Str(u'span'), SoftBreak(), Str(u'multiple'), Space(), Str(u\n'lines.')], [AlignCenter(), AlignDefault(), AlignRight(), AlignLeft()], [0.1\n6666666666666666, 0.1111111111111111, 0.2222222222222222, 0.3472222222222222\n], [[Plain([Str(u'Centered'), SoftBreak(), Str(u'Header')])], [Plain([Str(u'\nDefault'), SoftBreak(), Str(u'Aligned')])], [Plain([Str(u'Right'), SoftBreak\n(), Str(u'Aligned')])], [Plain([Str(u'Left'), SoftBreak(), Str(u'Aligned')])\n]], [[[Plain([Str(u'First')])], [Plain([Str(u'row')])], [Plain([Str(u'12.0')\n])], [Plain([Str(u'Example'), Space(), Str(u'of'), Space(), Str(u'a'), Space\n(), Str(u'row'), Space(), Str(u'that'), SoftBreak(), Str(u'spans'), Space(),\n Str(u'multiple'), Space(), Str(u'lines.')])]], [[Plain([Str(u'Second')])], \n[Plain([Str(u'row')])], [Plain([Str(u'5.0')])], [Plain([Str(u\"Here's\"), Spac\ne(), Str(u'another'), Space(), Str(u'one.'), Space(), Str(u'Note'), SoftBrea\nk(), Str(u'the'), Space(), Str(u'blank'), Space(), Str(u'line'), Space(), St\nr(u'between'), SoftBreak(), Str(u'rows.')])]]])])\n\n>>> \"\"\"\n... ----------- ------- --------------- -------------------------\n...    First    row                12.0 Example of a row that\n...                                     spans multiple lines.\n... \n...   Second    row                 5.0 Here's another one. Note\n...                                     the blank line between\n...                                     rows.\n... ----------- ------- --------------- -------------------------\n... \n... : Here's a multiline table without headers.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([Str(u\"Here's\"), Space(), Str(u'a'), Space(), Str\n(u'multiline'), Space(), Str(u'table'), Space(), Str(u'without'), Space(), S\ntr(u'headers.')], [AlignCenter(), AlignLeft(), AlignRight(), AlignLeft()], [\n0.16666666666666666, 0.1111111111111111, 0.2222222222222222, 0.3472222222222\n222], [[], [], [], []], [[[Plain([Str(u'First')])], [Plain([Str(u'row')])], \n[Plain([Str(u'12.0')])], [Plain([Str(u'Example'), Space(), Str(u'of'), Space\n(), Str(u'a'), Space(), Str(u'row'), Space(), Str(u'that'), SoftBreak(), Str\n(u'spans'), Space(), Str(u'multiple'), Space(), Str(u'lines.')])]], [[Plain(\n[Str(u'Second')])], [Plain([Str(u'row')])], [Plain([Str(u'5.0')])], [Plain([\nStr(u\"Here's\"), Space(), Str(u'another'), Space(), Str(u'one.'), Space(), St\nr(u'Note'), SoftBreak(), Str(u'the'), Space(), Str(u'blank'), Space(), Str(u\n'line'), Space(), Str(u'between'), SoftBreak(), Str(u'rows.')])]]])])\n")),(0,r.kt)("h4",{id:"extension-grid_tables"},"Extension: grid_tables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'... +---------------+---------------+--------------------+\n... | Fruit         | Price         | Advantages         |\n... +===============+===============+====================+\n... | Bananas       | $1.34         | - built-in wrapper |\n... |               |               | - bright color     |\n... +---------------+---------------+--------------------+\n... | Oranges       | $2.10         | - cures scurvy     |\n... |               |               | - tasty            |\n... +---------------+---------------+--------------------+\n... """\n... # doctest: +PANDOC\n')),(0,r.kt)("h4",{id:"extension-pipe_tables"},"Extension: pipe_tables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... | Right | Left | Default | Center |\n... |------:|:-----|---------|:------:|\n... |   12  |  12  |    12   |    12  |\n... |  123  |  123 |   123   |   123  |\n... |    1  |    1 |     1   |     1  |\n... \n...   : Demonstration of pipe table syntax.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([Str(u'Demonstration'), Space(), Str(u'of'), Spac\ne(), Str(u'pipe'), Space(), Str(u'table'), Space(), Str(u'syntax.')], [Align\nRight(), AlignLeft(), AlignDefault(), AlignCenter()], [0.0, 0.0, 0.0, 0.0], \n[[Plain([Str(u'Right')])], [Plain([Str(u'Left')])], [Plain([Str(u'Default')]\n)], [Plain([Str(u'Center')])]], [[[Plain([Str(u'12')])], [Plain([Str(u'12')]\n)], [Plain([Str(u'12')])], [Plain([Str(u'12')])]], [[Plain([Str(u'123')])], \n[Plain([Str(u'123')])], [Plain([Str(u'123')])], [Plain([Str(u'123')])]], [[P\nlain([Str(u'1')])], [Plain([Str(u'1')])], [Plain([Str(u'1')])], [Plain([Str(\nu'1')])]]])])\n\n>>> \"\"\"\n... fruit| price\n... -----|-----:\n... apple|2.05\n... pear|1.37\n... orange|3.09\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([], [AlignDefault(), AlignRight()], [0.0, 0.0], [\n[Plain([Str(u'fruit')])], [Plain([Str(u'price')])]], [[[Plain([Str(u'apple')\n])], [Plain([Str(u'2.05')])]], [[Plain([Str(u'pear')])], [Plain([Str(u'1.37'\n)])]], [[Plain([Str(u'orange')])], [Plain([Str(u'3.09')])]]])])\n\n>>> \"\"\"\n... | One | Two   |\n... |-----+-------|\n... | my  | table |\n... | is  | nice  |\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Table([], [AlignDefault(), AlignDefault()], [0.0, 0.0],\n [[Plain([Str(u'One')])], [Plain([Str(u'Two')])]], [[[Plain([Str(u'my')])], \n[Plain([Str(u'table')])]], [[Plain([Str(u'is')])], [Plain([Str(u'nice')])]]]\n)])\n")),(0,r.kt)("h2",{id:"metadata-blocks"},"Metadata blocks"),(0,r.kt)("h4",{id:"extension-pandoc_title_block"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"pandoc_title_block")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\\\n... % title\n... % author(s) (separated by semicolons)\n... % date\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'date', MetaInlines([Str(u'date')])), (u'title', MetaInli\nnes([Str(u'title')])), (u'author', MetaList([MetaInlines([Str(u'author(s)'),\n Space(), Str(u'(separated'), Space(), Str(u'by'), Space(), Str(u'semicolons\n)')])]))])), [])\n\n>>> \"\"\"\\\n... %\n... % Author\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'author', MetaList([MetaInlines([Str(u'Author')])]))])), \n[])\n\n>>> \"\"\"\\\n... % My title\n... %\n... % June 15, 2006\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'date', MetaInlines([Str(u'June'), Space(), Str(u'15,'), \nSpace(), Str(u'2006')])), (u'title', MetaInlines([Str(u'My'), Space(), Str(u\n'title')]))])), [])\n\n>>> \"\"\"\\\n... % Title\n... % Author One; Author Two\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'title', MetaInlines([Str(u'Title')])), (u'author', MetaL\nist([MetaInlines([Str(u'Author'), Space(), Str(u'One')]), MetaInlines([Str(u\n'Author'), Space(), Str(u'Two')])]))])), [])\n")),(0,r.kt)("p",null,"Pandoc does not conform to its documentation when title blocks use multiple\nlines with leading space. The corresponding examples have been removed."),(0,r.kt)("h4",{id:"extension-yaml_metadata_block"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"yaml_metadata_block")),(0,r.kt)("p",null,"The order of key-value pairs in maps are the same than in the json\nrepresentation, but this initial order is not specified by pandoc.\nHence, the following test is too strict and may fail."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ---\n... title:  'This is the title: it contains a colon'\n... author:\n... - name: Author One\n...   affiliation: University of Somewhere\n... - name: Author Two\n...   affiliation: University of Nowhere\n... tags: [nothing, nothingness]\n... abstract: |\n...   This is the abstract.\n... \n...   It consists of two paragraphs.\n... ...\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'abstract', MetaBlocks([Para([Str(u'This'), Space(), Str(\nu'is'), Space(), Str(u'the'), Space(), Str(u'abstract.')]), Para([Str(u'It')\n, Space(), Str(u'consists'), Space(), Str(u'of'), Space(), Str(u'two'), Spac\ne(), Str(u'paragraphs.')])])), (u'title', MetaInlines([Str(u'This'), Space()\n, Str(u'is'), Space(), Str(u'the'), Space(), Str(u'title:'), Space(), Str(u'\nit'), Space(), Str(u'contains'), Space(), Str(u'a'), Space(), Str(u'colon')]\n)), (u'tags', MetaList([MetaInlines([Str(u'nothing')]), MetaInlines([Str(u'n\nothingness')])])), (u'author', MetaList([MetaMap(map([(u'affiliation', MetaI\nnlines([Str(u'University'), Space(), Str(u'of'), Space(), Str(u'Somewhere')]\n)), (u'name', MetaInlines([Str(u'Author'), Space(), Str(u'One')]))])), MetaM\nap(map([(u'affiliation', MetaInlines([Str(u'University'), Space(), Str(u'of'\n), Space(), Str(u'Nowhere')])), (u'name', MetaInlines([Str(u'Author'), Space\n(), Str(u'Two')]))]))]))])), [])\n")),(0,r.kt)("h2",{id:"backslash-escapes"},"Backslash escapes"),(0,r.kt)("h4",{id:"extension-all_symbols_escapable"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"all_symbols_escapable")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> """\n... *\\*hello\\**\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Emph([Str(u\'*hello*\')])])])\n')),(0,r.kt)("h2",{id:"smart-punctuation"},"Smart punctuation"),(0,r.kt)("h4",{id:"extension"},"Extension"),(0,r.kt)("p",null,"Not tested, disabled by default."),(0,r.kt)("h2",{id:"inline-formatting"},"Inline Formatting"),(0,r.kt)("h3",{id:"emphasis"},"Emphasis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... This text is _emphasized with underscores_, and this\n... is *emphasized with asterisks*.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'text'), Space(), Str\n(u'is'), Space(), Emph([Str(u'emphasized'), Space(), Str(u'with'), Space(), \nStr(u'underscores')]), Str(u','), Space(), Str(u'and'), Space(), Str(u'this'\n), SoftBreak(), Str(u'is'), Space(), Emph([Str(u'emphasized'), Space(), Str(\nu'with'), Space(), Str(u'asterisks')]), Str(u'.')])])\n\n>>> \"\"\"\n... This is **strong emphasis** and __with underscores__.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Stron\ng([Str(u'strong'), Space(), Str(u'emphasis')]), Space(), Str(u'and'), Space(\n), Strong([Str(u'with'), Space(), Str(u'underscores')]), Str(u'.')])])\n\n>>> \"\"\"\n... This is * not emphasized *, and \\*neither is this\\*.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Str(u\n'*'), Space(), Str(u'not'), Space(), Str(u'emphasized'), Space(), Str(u'*,')\n, Space(), Str(u'and'), Space(), Str(u'*neither'), Space(), Str(u'is'), Spac\ne(), Str(u'this*.')])])\n")),(0,r.kt)("h4",{id:"extension-intraword_underscores"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"intraword_underscores")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"feas*ible*, not feas*able*.\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'feas'), Emph([Str(u'ible')]), Str(u','), Sp\nace(), Str(u'not'), Space(), Str(u'feas'), Emph([Str(u'able')]), Str(u'.')])\n])\n")),(0,r.kt)("h3",{id:"strikeout"},"Strikeout"),(0,r.kt)("h4",{id:"extension-strikeout"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"strikeout")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"This ~~is deleted text.~~\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Strikeout([Str(u'is'), Spa\nce(), Str(u'deleted'), Space(), Str(u'text.')])])])\n")),(0,r.kt)("h3",{id:"superscripts-and-subscripts"},"Superscripts and Subscripts"),(0,r.kt)("h4",{id:"extension-superscript-subscript"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"superscript"),", ",(0,r.kt)("inlineCode",{parentName:"h4"},"subscript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"H~2~O is a liquid.  2^10^ is 1024.\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'H'), Subscript([Str(u'2')]), Str(u'O'), Spa\nce(), Str(u'is'), Space(), Str(u'a'), Space(), Str(u'liquid.'), Space(), Str\n(u'2'), Superscript([Str(u'10')]), Space(), Str(u'is'), Space(), Str(u'1024.\n')])])\n")),(0,r.kt)("h3",{id:"verbatim"},"Verbatim"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"What is the difference between `>>=` and `>>`?\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'What'), Space(), Str(u'is'), Space(), Str(u\n'the'), Space(), Str(u'difference'), Space(), Str(u'between'), Space(), Code\n((u'', [], []), u'>>='), Space(), Str(u'and'), Space(), Code((u'', [], []), \nu'>>'), Str(u'?')])])\n\n>>> \"Here is a literal backtick `` ` ``.\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Here'), Space(), Str(u'is'), Space(), Str(u\n'a'), Space(), Str(u'literal'), Space(), Str(u'backtick'), Space(), Code((u'\n', [], []), u'`'), Str(u'.')])])\n\n>>> \"This is a backslash followed by an asterisk: `\\*`.\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Str(u\n'a'), Space(), Str(u'backslash'), Space(), Str(u'followed'), Space(), Str(u'\nby'), Space(), Str(u'an'), Space(), Str(u'asterisk:'), Space(), Code((u'', [\n], []), u'\\\\*'), Str(u'.')])])\n\n>>> \"`<$>`{.haskell}\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Code((u'', [u'haskell'], []), u'<$>')])])\n")),(0,r.kt)("h4",{id:"extension-inline_code_attributes"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"inline_code_attributes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"`<$>`{.haskell}\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Code((u'', [u'haskell'], []), u'<$>')])])\n")),(0,r.kt)("h3",{id:"small-caps"},"Small Caps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"<span style='font-variant:small-caps;'>Small caps</span>\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([SmallCaps([Str(u'Small'), Space(), Str(u'caps')])\n])])\n")),(0,r.kt)("h2",{id:"math"},"Math"),(0,r.kt)("h4",{id:"extension-tex_math_dollars"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"tex_math_dollars")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"$a=1$\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Math(InlineMath(), u'a=1')])])\n\n>>> \"$$\\int_0^1 f(x)\\, dx$$\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Math(DisplayMath(), u'\\\\int_0^1 f(x)\\\\, dx')])])\n")),(0,r.kt)("h2",{id:"raw-html"},"Raw HTML"),(0,r.kt)("h4",{id:"extension-raw_html"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"raw_html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"<html></html>\" # doctest: +PANDOC\nPandoc(Meta(map()), [RawBlock(Format(u'html'), u'<html>'), RawBlock(Format(u\n'html'), u'</html>')])\n")),(0,r.kt)("h4",{id:"extension-markdown_in_html_blocks"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"markdown_in_html_blocks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... <table>\n... <tr>\n... <td>*one*</td>\n... <td>[a link](http://google.com)</td>\n... </tr>\n... </table>\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [RawBlock(Format(u'html'), u'<table>'), RawBlock(Format(\nu'html'), u'<tr>'), RawBlock(Format(u'html'), u'<td>'), Plain([Emph([Str(u'o\nne')])]), RawBlock(Format(u'html'), u'</td>'), RawBlock(Format(u'html'), u'<\ntd>'), Plain([Link((u'', [], []), [Str(u'a'), Space(), Str(u'link')], (u'htt\np://google.com', u''))]), RawBlock(Format(u'html'), u'</td>'), RawBlock(Form\nat(u'html'), u'</tr>'), RawBlock(Format(u'html'), u'</table>')])\n")),(0,r.kt)("h4",{id:"extension-native_divs"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"native_divs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"<div></div>\" # doctest: +PANDOC\nPandoc(Meta(map()), [Div((u'', [], []), [])])\n")),(0,r.kt)("h4",{id:"extension-native_spans"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"native_spans")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"<span></span>\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Span((u'', [], []), [])])])\n")),(0,r.kt)("h2",{id:"raw-tex"},"Raw TeX"),(0,r.kt)("h4",{id:"extension-raw_tex"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"raw_tex")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"This result was proved in \\cite{jones.1967}.\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'result'), Space(), S\ntr(u'was'), Space(), Str(u'proved'), Space(), Str(u'in'), Space(), RawInline\n(Format(u'tex'), u'\\\\cite{jones.1967}'), Str(u'.')])])\n\n>>> r\"\"\"\n... \\begin{tabular}{|l|l|}\\hline\n... Age & Frequency \\\\ \\hline\n... 18--25  & 15 \\\\\n... 26--35  & 33 \\\\\n... 36--45  & 22 \\\\ \\hline\n... \\end{tabular}\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [RawBlock(Format(u'latex'), u'\\\\begin{tabular}{|l|l|}\\\\h\nline\\nAge & Frequency \\\\\\\\ \\\\hline\\n18--25  & 15 \\\\\\\\\\n26--35  & 33 \\\\\\\\\\n36\n--45  & 22 \\\\\\\\ \\\\hline\\n\\\\end{tabular}')])\n")),(0,r.kt)("h2",{id:"latex-macros"},"LaTeX macros"),(0,r.kt)("h4",{id:"extension-latex_macros"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"latex_macros")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'>>> r"""\n... \\newcommand{\\tuple}[1]{\\langle #1 \\rangle}\n...\n... $\\tuple{a, b, c}$\n... """\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Math(InlineMath(), u\'{\\\\langle a, b, c \\\\rangle}\'\n)])])\n')),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("h3",{id:"automatic-links"},"Automatic Links"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"<http://google.com>\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'http://google.com')], \n(u'http://google.com', u''))])])\n\n>>> \"<sam@green.eggs.ham>\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'sam@green.eggs.ham')],\n (u'mailto:sam@green.eggs.ham', u''))])])\n")),(0,r.kt)("h3",{id:"inline-links"},"Inline links"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... This is an [inline link](/url), and here's [one with\n... a title](http://fsf.org \"click here for a good time!\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'This'), Space(), Str(u'is'), Space(), Str(u\n'an'), Space(), Link((u'', [], []), [Str(u'inline'), Space(), Str(u'link')],\n (u'/url', u'')), Str(u','), Space(), Str(u'and'), Space(), Str(u\"here's\"), \nSpace(), Str(u'[one'), Space(), Str(u'with'), SoftBreak(), Str(u'a'), Space(\n), Str(u'title](http://fsf.org'), Space(), Str(u'\"click'), Space(), Str(u'he\nre'), Space(), Str(u'for'), Space(), Str(u'a'), Space(), Str(u'good'), Space\n(), Str(u'time!')])])\n\n>>> \"[Write me!](mailto:sam@green.eggs.ham)\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'Write'), Space(), Str(\nu'me!')], (u'mailto:sam@green.eggs.ham', u''))])])\n")),(0,r.kt)("h3",{id:"reference-links"},"Reference links"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... [my label 1], [my label 2], [my label 3], [my label 4]. \n...\n... [my label 1]: /foo/bar.html  \"My title, optional\"\n... [my label 2]: /foo\n... [my label 3]: http://fsf.org (The free software foundation)\n... [my label 4]: /bar#special  'A title in single quotes'\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'my'), Space(), Str(u'l\nabel'), Space(), Str(u'1')], (u'/foo/bar.html', u'My title, optional')), Str\n(u','), Space(), Link((u'', [], []), [Str(u'my'), Space(), Str(u'label'), Sp\nace(), Str(u'2')], (u'/foo', u'')), Str(u','), Space(), Link((u'', [], []), \n[Str(u'my'), Space(), Str(u'label'), Space(), Str(u'3')], (u'http://fsf.org'\n, u'The free software foundation')), Str(u','), Space(), Link((u'', [], []),\n [Str(u'my'), Space(), Str(u'label'), Space(), Str(u'4')], (u'/bar#special',\n u'A title in single quotes')), Str(u'.')])])\n\n>>> \"\"\"\n... [my label 5].\n...\n... [my label 5]: <http://foo.bar.baz>\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'my'), Space(), Str(u'l\nabel'), Space(), Str(u'5')], (u'http://foo.bar.baz', u'')), Str(u'.')])])\n\n>>> \"\"\"\n... [my label 3].\n... \n... [my label 3]: http://fsf.org \"The free software foundation\"\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Link((u'', [], []), [Str(u'my'), Space(), Str(u'l\nabel'), Space(), Str(u'3')], (u'http://fsf.org', u'The free software foundat\nion')), Str(u'.')])])\n\n>>> \"\"\"\n... Here is [my link][FOO]\n...\n... [Foo]: /bar/baz\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Here'), Space(), Str(u'is'), Space(), Link(\n(u'', [], []), [Str(u'my'), Space(), Str(u'link')], (u'/bar/baz', u''))])])\n\n>>> \"\"\"\n... See [my website][].\n...\n... [my website]: http://foo.bar.baz\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'See'), Space(), Link((u'', [], []), [Str(u'\nmy'), Space(), Str(u'website')], (u'http://foo.bar.baz', u'')), Str(u'.')])]\n)\n\n>>> \"\"\"\n... > My block [quote].\n... >\n... > [quote]: /foo\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [BlockQuote([Para([Str(u'My'), Space(), Str(u'block'), S\npace(), Link((u'', [], []), [Str(u'quote')], (u'/foo', u'')), Str(u'.')])])]\n)\n")),(0,r.kt)("h4",{id:"extension-shortcut_reference_links"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"shortcut_reference_links")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... See [my website].\n...\n... [my website]: http://foo.bar.baz\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'See'), Space(), Link((u'', [], []), [Str(u'\nmy'), Space(), Str(u'website')], (u'http://foo.bar.baz', u'')), Str(u'.')])]\n)\n")),(0,r.kt)("h3",{id:"internal-links"},"Internal links"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"See the [Introduction](#introduction).\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'See'), Space(), Str(u'the'), Space(), Link(\n(u'', [], []), [Str(u'Introduction')], (u'#introduction', u'')), Str(u'.')])\n])\n\n\n>>> \"\"\"\n... See the [Introduction].\n...\n... [Introduction]: #introduction\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'See'), Space(), Str(u'the'), Space(), Link(\n(u'', [], []), [Str(u'Introduction')], (u'#introduction', u'')), Str(u'.')])\n])\n")),(0,r.kt)("h2",{id:"images"},"Images"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ![la lune](lalune.jpg \"Voyage to the moon\")\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Image((u'', [], []), [Str(u'la'), Space(), Str(u'\nlune')], (u'lalune.jpg', u'fig:Voyage to the moon'))])])\n\n>>> \"\"\"\n... ![movie reel]\n...\n... [movie reel]: movie.gif\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Image((u'', [], []), [Str(u'movie'), Space(), Str\n(u'reel')], (u'movie.gif', u'fig:'))])])\n")),(0,r.kt)("h4",{id:"extension-implicit_figures"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"implicit_figures")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ![This is the caption](/url/of/image.png)\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Image((u'', [], []), [Str(u'This'), Space(), Str(\nu'is'), Space(), Str(u'the'), Space(), Str(u'caption')], (u'/url/of/image.pn\ng', u'fig:'))])])\n\nISSUE HERE.\n\n>>> r\"\"\"\n... ![This image won't be a figure](/url/of/image.png)\\ \n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Image((u'', [], []), [Str(u'This'), Space(), Str(\nu'image'), Space(), Str(u\"won't\"), Space(), Str(u'be'), Space(), Str(u'a'), \nSpace(), Str(u'figure')], (u'/url/of/image.png', u'')), Str(u'\\xa0')])])\n")),(0,r.kt)("h3",{id:"extension-link_attributes"},"Extension: link_attributes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... An inline ![image](foo.jpg){#id .class width=30 height=20px}\n... and a reference ![image][ref] with attributes.\n...\n... [ref]: foo.jpg \"optional title\" {#id .class key=val key2=\"val 2\"}\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'An'), Space(), Str(u'inline'), Space(), Ima\nge((u'id', [u'class'], [(u'width', u'30'), (u'height', u'20px')]), [Str(u'im\nage')], (u'foo.jpg', u'')), SoftBreak(), Str(u'and'), Space(), Str(u'a'), Sp\nace(), Str(u'reference'), Space(), Image((u'id', [u'class'], [(u'key', u'val\n'), (u'key2', u'val 2')]), [Str(u'image')], (u'foo.jpg', u'optional title'))\n, Space(), Str(u'with'), Space(), Str(u'attributes.')])])\n\n>>> \"![](file.jpg){ width=50% }\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Image((u'', [], [(u'width', u'50%')]), [], (u'fil\ne.jpg', u'fig:'))])])\n")),(0,r.kt)("h2",{id:"footnotes"},"Footnotes"),(0,r.kt)("h4",{id:"extension-footnotes"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"footnotes")),(0,r.kt)("p",null,"Pandoc\u2019s Markdown allows footnotes, using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... Here is a footnote reference,[^1] and another.[^longnote]\n... \n... [^1]: Here is the footnote.\n... \n... [^longnote]: Here's one with multiple blocks.\n... \n...     Subsequent paragraphs are indented to show that they\n... belong to the previous footnote.\n... \n...         { some.code }\n... \n...     The whole paragraph can be indented, or just the first\n...     line.  In this way, multi-paragraph footnotes work like\n...     multi-paragraph list items.\n... \n... This paragraph won't be part of the note, because it\n... isn't indented.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Here'), Space(), Str(u'is'), Space(), Str(u\n'a'), Space(), Str(u'footnote'), Space(), Str(u'reference,'), Note([Para([St\nr(u'Here'), Space(), Str(u'is'), Space(), Str(u'the'), Space(), Str(u'footno\nte.')])]), Space(), Str(u'and'), Space(), Str(u'another.'), Note([Para([Str(\nu\"Here's\"), Space(), Str(u'one'), Space(), Str(u'with'), Space(), Str(u'mult\niple'), Space(), Str(u'blocks.')]), Para([Str(u'Subsequent'), Space(), Str(u\n'paragraphs'), Space(), Str(u'are'), Space(), Str(u'indented'), Space(), Str\n(u'to'), Space(), Str(u'show'), Space(), Str(u'that'), Space(), Str(u'they')\n, SoftBreak(), Str(u'belong'), Space(), Str(u'to'), Space(), Str(u'the'), Sp\nace(), Str(u'previous'), Space(), Str(u'footnote.')]), CodeBlock((u'', [], [\n]), u'{ some.code }'), Para([Str(u'The'), Space(), Str(u'whole'), Space(), S\ntr(u'paragraph'), Space(), Str(u'can'), Space(), Str(u'be'), Space(), Str(u'\nindented,'), Space(), Str(u'or'), Space(), Str(u'just'), Space(), Str(u'the'\n), Space(), Str(u'first'), SoftBreak(), Str(u'line.'), Space(), Str(u'In'), \nSpace(), Str(u'this'), Space(), Str(u'way,'), Space(), Str(u'multi-paragraph\n'), Space(), Str(u'footnotes'), Space(), Str(u'work'), Space(), Str(u'like')\n, SoftBreak(), Str(u'multi-paragraph'), Space(), Str(u'list'), Space(), Str(\nu'items.')])])]), Para([Str(u'This'), Space(), Str(u'paragraph'), Space(), S\ntr(u\"won't\"), Space(), Str(u'be'), Space(), Str(u'part'), Space(), Str(u'of'\n), Space(), Str(u'the'), Space(), Str(u'note,'), Space(), Str(u'because'), S\npace(), Str(u'it'), SoftBreak(), Str(u\"isn't\"), Space(), Str(u'indented.')])\n])\n")),(0,r.kt)("h4",{id:"extension-inline_notes"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"inline_notes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... Here is an inline note.^[Inlines notes are easier to write, since\n... you don't have to pick an identifier and move down to type the\n... note.]\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Here'), Space(), Str(u'is'), Space(), Str(u\n'an'), Space(), Str(u'inline'), Space(), Str(u'note.'), Note([Para([Str(u'In\nlines'), Space(), Str(u'notes'), Space(), Str(u'are'), Space(), Str(u'easier\n'), Space(), Str(u'to'), Space(), Str(u'write,'), Space(), Str(u'since'), So\nftBreak(), Str(u'you'), Space(), Str(u\"don't\"), Space(), Str(u'have'), Space\n(), Str(u'to'), Space(), Str(u'pick'), Space(), Str(u'an'), Space(), Str(u'i\ndentifier'), Space(), Str(u'and'), Space(), Str(u'move'), Space(), Str(u'dow\nn'), Space(), Str(u'to'), Space(), Str(u'type'), Space(), Str(u'the'), SoftB\nreak(), Str(u'note.')])])])])\n")),(0,r.kt)("h2",{id:"citations"},"Citations"),(0,r.kt)("h4",{id:"extension-citations"},"Extension: ",(0,r.kt)("inlineCode",{parentName:"h4"},"citations")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> \"\"\"\n... ---\n... references:\n... - type: article-journal\n...   id: WatsonCrick1953\n...   author:\n...   - family: Watson\n...     given: J. D.\n...   - family: Crick\n...     given: F. H. C.\n...   issued:\n...     date-parts:\n...     - - 1953\n...       - 4\n...       - 25\n...   title: 'Molecular structure of nucleic acids: a structure for deoxyribose\n...     nucleic acid'\n...   title-short: Molecular structure of nucleic acids\n...   container-title: Nature\n...   volume: 171\n...   issue: 4356\n...   page: 737-738\n...   DOI: 10.1038/171737a0\n...   URL: http://www.nature.com/nature/journal/v171/n4356/abs/171737a0.html\n...   language: en-GB\n... ---\n... \n... [@WatsonCrick1953]\n... \"\"\" \n... # doctest: +PANDOC\nPandoc(Meta(map([(u'references', MetaList([MetaMap(map([(u'DOI', MetaInlines\n([Str(u'10.1038/171737a0')])), (u'language', MetaInlines([Str(u'en-GB')])), \n(u'author', MetaList([MetaMap(map([(u'given', MetaInlines([Str(u'J.'), Space\n(), Str(u'D.')])), (u'family', MetaInlines([Str(u'Watson')]))])), MetaMap(ma\np([(u'given', MetaInlines([Str(u'F.'), Space(), Str(u'H.'), Space(), Str(u'C\n.')])), (u'family', MetaInlines([Str(u'Crick')]))]))])), (u'URL', MetaInline\ns([Str(u'http://www.nature.com/nature/journal/v171/n4356/abs/171737a0.html')\n])), (u'issued', MetaMap(map([(u'date-parts', MetaList([MetaList([MetaString\n(u'1953'), MetaString(u'4'), MetaString(u'25')])]))]))), (u'title', MetaInli\nnes([Str(u'Molecular'), Space(), Str(u'structure'), Space(), Str(u'of'), Spa\nce(), Str(u'nucleic'), Space(), Str(u'acids:'), Space(), Str(u'a'), Space(),\n Str(u'structure'), Space(), Str(u'for'), Space(), Str(u'deoxyribose'), Spac\ne(), Str(u'nucleic'), Space(), Str(u'acid')])), (u'id', MetaInlines([Str(u'W\natsonCrick1953')])), (u'volume', MetaString(u'171')), (u'issue', MetaString(\nu'4356')), (u'container-title', MetaInlines([Str(u'Nature')])), (u'title-sho\nrt', MetaInlines([Str(u'Molecular'), Space(), Str(u'structure'), Space(), St\nr(u'of'), Space(), Str(u'nucleic'), Space(), Str(u'acids')])), (u'type', Met\naInlines([Str(u'article-journal')])), (u'page', MetaInlines([Str(u'737-738')\n]))]))]))])), [Para([Cite([Citation(u'WatsonCrick1953', [], [], NormalCitati\non(), 0, 0)], [Str(u'[@WatsonCrick1953]')])])])\n\n>>> \"\"\"\n... Blah blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\n... \n... Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].\n... \n... Blah blah [@smith04; @doe99].\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Blah'), Space(), Str(u'blah'), Space(), Cit\ne([Citation(u'doe99', [Str(u'see')], [Str(u','), Space(), Str(u'pp.'), Space\n(), Str(u'33-35')], NormalCitation(), 0, 0), Citation(u'smith04', [Str(u'als\no')], [Str(u','), Space(), Str(u'chap.'), Space(), Str(u'1')], NormalCitatio\nn(), 0, 0)], [Str(u'[see'), Space(), Str(u'@doe99,'), Space(), Str(u'pp.'), \nSpace(), Str(u'33-35;'), Space(), Str(u'also'), Space(), Str(u'@smith04,'), \nSpace(), Str(u'chap.'), Space(), Str(u'1]')]), Str(u'.')]), Para([Str(u'Blah\n'), Space(), Str(u'blah'), Space(), Cite([Citation(u'doe99', [], [Str(u','),\n Space(), Str(u'pp.'), Space(), Str(u'33-35,'), Space(), Str(u'38-39'), Spac\ne(), Str(u'and'), Space(), Emph([Str(u'passim')])], NormalCitation(), 0, 0)]\n, [Str(u'[@doe99,'), Space(), Str(u'pp.'), Space(), Str(u'33-35,'), Space(),\n Str(u'38-39'), Space(), Str(u'and'), Space(), Str(u'*passim*]')]), Str(u'.'\n)]), Para([Str(u'Blah'), Space(), Str(u'blah'), Space(), Cite([Citation(u'sm\nith04', [], [], NormalCitation(), 0, 0), Citation(u'doe99', [], [], NormalCi\ntation(), 0, 0)], [Str(u'[@smith04;'), Space(), Str(u'@doe99]')]), Str(u'.')\n])])\n\n>>> \"Smith says blah [-@smith04].\" # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Str(u'Smith'), Space(), Str(u'says'), Space(), St\nr(u'blah'), Space(), Cite([Citation(u'smith04', [], [], SuppressAuthor(), 0,\n 0)], [Str(u'[-@smith04]')]), Str(u'.')])])\n\n>>> \"\"\"\n... @smith04 says blah.\n... \n... @smith04 [p. 33] says blah.\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map()), [Para([Cite([Citation(u'smith04', [], [], AuthorInText()\n, 0, 0)], [Str(u'@smith04')]), Space(), Str(u'says'), Space(), Str(u'blah.')\n]), Para([Cite([Citation(u'smith04', [], [Str(u'p.'), Space(), Str(u'33')], \nAuthorInText(), 0, 0)], [Str(u'@smith04'), Space(), Str(u'[p.'), Space(), St\nr(u'33]')]), Space(), Str(u'says'), Space(), Str(u'blah.')])])\n\n>>> \"\"\"\n... ---\n... nocite: |\n...   @item1, @item2\n... ---\n... \n... @item3\n... \"\"\"\n... # doctest: +PANDOC\nPandoc(Meta(map([(u'nocite', MetaBlocks([Para([Cite([Citation(u'item1', [], \n[], AuthorInText(), 0, 0)], [Str(u'@item1')]), Str(u','), Space(), Cite([Cit\nation(u'item2', [], [], AuthorInText(), 0, 0)], [Str(u'@item2')])])]))])), [\nPara([Cite([Citation(u'item3', [], [], AuthorInText(), 0, 0)], [Str(u'@item3\n')])])])\n")))}p.isMDXComponent=!0}}]);