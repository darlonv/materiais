"use strict";(self.webpackChunkalgoritmos=self.webpackChunkalgoritmos||[]).push([[687],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>v});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(t),c=l,v=p["".concat(s,".").concat(c)]||p[c]||d[c]||r;return t?n.createElement(v,o(o({ref:a},m),{},{components:t})):n.createElement(v,o({ref:a},m))}));function v(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>o});var n=t(7294),l=t(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,o),hidden:t},a)}},4866:(e,a,t)=>{t.d(a,{Z:()=>N});var n=t(7462),l=t(7294),r=t(6010),o=t(2466),i=t(6550),s=t(1980),u=t(7392),m=t(12);function p(e){return function(e){return l.Children.map(e,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:l}}=e;return{value:a,label:t,attributes:n,default:l}}))}function d(e){const{values:a,children:t}=e;return(0,l.useMemo)((()=>{const e=a??p(t);return function(e){const a=(0,u.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function c(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function v(e){let{queryString:a=!1,groupId:t}=e;const n=(0,i.k6)(),r=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s._X)(r),(0,l.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(n.location.search);a.set(r,e),n.replace({...n.location,search:a.toString()})}),[r,n])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,r=d(e),[o,i]=(0,l.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!c({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:r}))),[s,u]=v({queryString:t,groupId:n}),[p,g]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,r]=(0,m.Nk)(t);return[n,(0,l.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:n}),k=(()=>{const e=s??p;return c({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!c({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var k=t(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:a,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const a=e.currentTarget,t=m.indexOf(a),n=u[t].value;n!==i&&(p(a),s(n))},c=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;a=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;a=m[t]??m[m.length-1];break}}a?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>m.push(e),onKeyDown:c,onClick:d},o,{className:(0,r.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===a})}),t??a)})))}function f(e){let{lazy:a,children:t,selectedValue:n}=e;if(t=Array.isArray(t)?t:[t],a){const e=t.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},t.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function h(e){const a=g(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},l.createElement(y,(0,n.Z)({},e,a)),l.createElement(f,(0,n.Z)({},e,a)))}function N(e){const a=(0,k.Z)();return l.createElement(h,(0,n.Z)({key:String(a)},e))}},47:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=t(7462),l=(t(7294),t(3905)),r=t(4866),o=t(5162);const i={},s="Tipos, tamanhos e literais",u={unversionedId:"Algoritmos/Basicos/Tipos_tamanhos",id:"Algoritmos/Basicos/Tipos_tamanhos",title:"Tipos, tamanhos e literais",description:"As diferentes linguagens de programa\xe7\xe3o podem possuir em sua implementa\xe7\xe3o v\xe1rios tipos de dados primitivos, e os valores que podem ser armazenados em vari\xe1veis de cada tipo depende da quantidade de mem\xf3ria que cada tipo utiliza.",source:"@site/docs/Algoritmos/02-Basicos/08-Tipos_tamanhos.md",sourceDirName:"Algoritmos/02-Basicos",slug:"/Algoritmos/Basicos/Tipos_tamanhos",permalink:"/materiais/docs/Algoritmos/Basicos/Tipos_tamanhos",draft:!1,editUrl:"https://github.com/darlonv/algoritmos/tree/main/docs/Algoritmos/02-Basicos/08-Tipos_tamanhos.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"sidebarAlgoritmos",previous:{title:"Express\xf5es",permalink:"/materiais/docs/Algoritmos/Basicos/Expressoes"},next:{title:"Blocos de c\xf3digo",permalink:"/materiais/docs/Algoritmos/Basicos/Blocos"}},m={},p=[{value:"Tipos",id:"tipos",level:2},{value:"M\xednimos e m\xe1ximos para inteiro",id:"m\xednimos-e-m\xe1ximos-para-inteiro",level:2},{value:"M\xednimos e m\xe1ximos para real",id:"m\xednimos-e-m\xe1ximos-para-real",level:2},{value:"Overflow",id:"overflow",level:2},{value:"Underflow",id:"underflow",level:2},{value:"Literais",id:"literais",level:2},{value:"inteiro",id:"inteiro",level:3},{value:"Decimal",id:"decimal",level:4},{value:"Hexadecimal",id:"hexadecimal",level:4},{value:"Bin\xe1rio",id:"bin\xe1rio",level:4},{value:"real",id:"real",level:3},{value:"Decimal",id:"decimal-1",level:4},{value:"Hexadecimal",id:"hexadecimal-1",level:4},{value:"Refer\xeancias",id:"refer\xeancias",level:2}],d={toc:p},c="wrapper";function v(e){let{components:a,...t}=e;return(0,l.kt)(c,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tipos-tamanhos-e-literais"},"Tipos, tamanhos e literais"),(0,l.kt)("p",null,"As diferentes linguagens de programa\xe7\xe3o podem possuir em sua implementa\xe7\xe3o v\xe1rios tipos de dados primitivos, e os valores que podem ser armazenados em vari\xe1veis de cada tipo depende da quantidade de mem\xf3ria que cada tipo utiliza."),(0,l.kt)("h2",{id:"tipos"},"Tipos"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("p",null,"Para inteiros:   "),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Tipo de dado"),(0,l.kt)("th",{parentName:"tr",align:null},"Tamanho"),(0,l.kt)("th",{parentName:"tr",align:null},"valor m\xednimo"),(0,l.kt)("th",{parentName:"tr",align:null},"valor m\xe1ximo"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"byte"),(0,l.kt)("td",{parentName:"tr",align:null},"1 byte"),(0,l.kt)("td",{parentName:"tr",align:null},"-128"),(0,l.kt)("td",{parentName:"tr",align:null},"127")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"short"),(0,l.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"-32768"),(0,l.kt)("td",{parentName:"tr",align:null},"32767")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"4 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"-2147483648"),(0,l.kt)("td",{parentName:"tr",align:null},"2147483647")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"long"),(0,l.kt)("td",{parentName:"tr",align:null},"8 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"-9223372036854775808"),(0,l.kt)("td",{parentName:"tr",align:null},"9223372036854775807 ",(0,l.kt)("sup",{parentName:"td",id:"fnref-1"},(0,l.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")))))),(0,l.kt)("p",null,"Para real:  "),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Tipo de dado"),(0,l.kt)("th",{parentName:"tr",align:null},"Tamanho"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"4 bytes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"double"),(0,l.kt)("td",{parentName:"tr",align:null},"8 bytes")))),(0,l.kt)("p",null,"para l\xf3gico:  "),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Tipo de dado"),(0,l.kt)("th",{parentName:"tr",align:null},"Tamanho"),(0,l.kt)("th",{parentName:"tr",align:null},"valores"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"1 bit"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," / ",(0,l.kt)("inlineCode",{parentName:"td"},"false"))))),(0,l.kt)("p",null,"para caractere:  "),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Tipo de dado"),(0,l.kt)("th",{parentName:"tr",align:null},"Tamanho"),(0,l.kt)("th",{parentName:"tr",align:null},"descri\xe7\xe3o"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"char"),(0,l.kt)("td",{parentName:"tr",align:null},"2 bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"armazena um \xfanico caractere")))),(0,l.kt)("p",null,"Fonte: ",(0,l.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/specs/jls/se21/html/jls-4.html#jls-4.2"},"Oracle. Java Language Specification. Types, Values and Variables: 4.2.1 Integral Types and Values."))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h2",{id:"m\xednimos-e-m\xe1ximos-para-inteiro"},"M\xednimos e m\xe1ximos para inteiro"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarValoresMinimosInteiro() {\n\n    byte var_byte = Byte.MIN_VALUE;\n    short var_short = Short.MIN_VALUE;\n    int var_int = Integer.MIN_VALUE;\n    long var_long = Long.MIN_VALUE;\n\n    System.out.println("Valores m\xednimos para inteiros: ");\n    System.out.println("    min byte  : " + var_byte);\n    System.out.println("    min short : " + var_short);\n    System.out.println("    min int   : " + var_int);\n    System.out.println("    min long  : " + var_long);\n\n}\n\npublic static void mostrarValoresMaximosInteiro() {\n\n    byte var_byte = Byte.MAX_VALUE;\n    short var_short = Short.MAX_VALUE;\n    int var_int = Integer.MAX_VALUE;\n    long var_long = Long.MAX_VALUE;\n\n    System.out.println("Valores m\xe1ximos para inteiros: ");\n    System.out.println("    max byte  : " + var_byte);\n    System.out.println("    max short : " + var_short);\n    System.out.println("    max int   : " + var_int);\n    System.out.println("    max long  : " + var_long);\n\n}\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores m\xednimos para inteiros: \n    min byte  : -128\n    min short : -32768\n    min int   : -2147483648\n    min long  : -9223372036854775808\nValores m\xe1ximos para inteiros: \n    max byte  : 127\n    max short : 32767\n    max int   : 2147483647\n    max long  : 9223372036854775807\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h2",{id:"m\xednimos-e-m\xe1ximos-para-real"},"M\xednimos e m\xe1ximos para real"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarValoresMinimosReal() {\n    float var_float = Float.MIN_VALUE;\n    double var_double = Double.MIN_VALUE;\n\n    System.out.println("Valores m\xednimos para real: ");\n    System.out.println("    min float  : " + var_float);\n    System.out.println("    min double : " + var_double);\n}\n\npublic static void mostrarValoresMaximosReal() {\n    float var_float = Float.MAX_VALUE;\n    double var_double = Double.MAX_VALUE;\n\n    System.out.println("Valores m\xe1ximos para real: ");\n    System.out.println("    max float  : " + var_float);\n    System.out.println("    max double : " + var_double);\n}\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores m\xednimos para real: \n    min float  : 1.4E-45\n    min double : 4.9E-324\nValores m\xe1ximos para real: \n    max float  : 3.4028235E38\n    max double : 1.7976931348623157E308\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Observe"),(0,l.kt)("br",{parentName:"p"}),"\n","O que o valor m\xednimo significa aqui?")),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h2",{id:"overflow"},"Overflow"),(0,l.kt)("p",null,"Dizemos que existe um ",(0,l.kt)("em",{parentName:"p"},"overflow")," quando o valor a ser armazenado extrapola (para mais ou para menos) o valor poss\xedvel de ser armazenado utilizando determinado tipo de dado."),(0,l.kt)("p",null,"Quando o valor extrapola o valor m\xe1ximo dizemos que existe um ",(0,l.kt)("strong",{parentName:"p"},"overflow positivo"),", e quando extrapola o valor m\xednimo dizemos que ocorre um ",(0,l.kt)("strong",{parentName:"p"},"overflow negativo")," (STALLINGS 2010 p.270)."),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarOverflowInteiro() {\n\n    byte var_byte = Byte.MAX_VALUE;\n    short var_short = Short.MAX_VALUE;\n    int var_int = Integer.MAX_VALUE;\n    long var_long = Long.MAX_VALUE;\n\n    var_byte++;\n    var_short++;\n    var_int++;\n    var_long++;\n\n    System.out.println("Valores m\xe1ximos +1 para inteiros: ");\n    System.out.println("    max byte  : " + var_byte);\n    System.out.println("    max short : " + var_short);\n    System.out.println("    max int   : " + var_int);\n    System.out.println("    max long  : " + var_long);\n\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sa\xedda:"),"  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores m\xe1ximos +1 para inteiros: \n    max byte  : -128\n    max short : -32768\n    max int   : -2147483648\n    max long  : -9223372036854775808\n")),(0,l.kt)("admonition",{title:"Aten\xe7\xe3o",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"O ",(0,l.kt)("em",{parentName:"p"},"overflow")," \xe9 um erro nos valores, e portanto deve-se evitar que ele ocorra. Por isso, deve-se tomar o cuidado ao escolher o tipo de dado a ser utilizado."))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h2",{id:"underflow"},"Underflow"),(0,l.kt)("p",null,"Para os valores reais, quando um valor \xe9 pequeno o suficiente que n\xe3o pode ser armazenado dizemos que houve um ",(0,l.kt)("strong",{parentName:"p"},"underflow"),". "),(0,l.kt)("h2",{id:"literais"},"Literais"),(0,l.kt)("p",null,"Chamamos de literais aos valores informados diretamente no c\xf3digo, de maneira expl\xedcita. "),(0,l.kt)("h3",{id:"inteiro"},"inteiro"),(0,l.kt)("h4",{id:"decimal"},"Decimal"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},' public static void mostrarLiteraisInteiroDecimal() {\n    int var_int;\n    long var_long;\n\n    // Decimal\n    var_int = 10100;\n    var_long = 10100l; // l ou L para long\n\n    System.out.println("Valores em decimal: ");\n    System.out.println("    10100  : " + var_int);\n    System.out.println("    10100  : " + var_long);\n\n    }\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores em decimal: \n    10100  : 10100\n    10100  : 10100\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h4",{id:"hexadecimal"},"Hexadecimal"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarLiteraisInteiroHexadecimal() {\n    int var_int;\n    long var_long;\n\n    // Hexadecimal\n    var_int = 0x10100;\n    var_long = 0x10100l; // l ou L para long\n\n    System.out.println("Valores em hexadecimal: ");\n    System.out.println("    0x10100  : " + var_int);\n    System.out.println("    0x10100  : " + var_long);\n\n}\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores em hexadecimal: \n    0x10100  : 65792\n    0x10100  : 65792\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h4",{id:"bin\xe1rio"},"Bin\xe1rio"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarLiteraisInteiroBinario() {\n    int var_int;\n    long var_long;\n\n    // Bin\xe1rio\n    var_int = 0b10100;\n    var_long = 0b10100l; // l ou L para long\n\n    System.out.println("Valores em bin\xe1rio: ");\n    System.out.println("    0b10100  : " + var_int);\n    System.out.println("    0b10100  : " + var_long);\n\n    }\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores em bin\xe1rio: \n    0b10100  : 20\n    0b10100  : 20\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h3",{id:"real"},"real"),(0,l.kt)("h4",{id:"decimal-1"},"Decimal"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarLiteraisRealDecimal() {\n    float var_float;\n    double var_double;\n\n    // Decimais\n    var_float = 10100f;  // f ou F para float\n    var_double = 10100d; // d ou D para double\n\n    System.out.println("Valores em decimal: ");\n    System.out.println("    10100f  : " + var_float);\n    System.out.println("    10100d  : " + var_double);\n\n}\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores em decimal: \n    10100f  : 10100.0\n    10100d  : 10100.0\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h4",{id:"hexadecimal-1"},"Hexadecimal"),(0,l.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"pseudocodigo",label:"Pseudoc\xf3digo",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'escreva("Ol\xe1 Mundo");\n'))),(0,l.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'public static void mostrarLiteraisRealHexadecimal() {\n    float var_float;\n    double var_double;\n\n    // Hexadecimal\n    // 0x <val hex> p <exp de 2>\n    var_float = 0x10.0P2f; // 0x10.0 * 2^2 = 16 * 4 = 64\n    var_double = 0x10.0P3d; // 0x10.0 * 2^3 = 16 * 8 = 128\n\n    System.out.println("Valores em hexadecimal: ");\n    System.out.println("    0x10.0P2f  : " + var_float);\n    System.out.println("    0x10.0P3d  : " + var_double);\n\n}\n')),(0,l.kt)("p",null,"Sa\xedda:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Valores em hexadecimal: \n    0x1p1f  : 64.0\n    0x1p1f  : 128.0\n"))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'print("Ol\xe1 Mundo")\n'))),(0,l.kt)(o.Z,{value:"c",label:"C",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'printf("Ol\xe1 Mundo")\n')))),(0,l.kt)("h2",{id:"refer\xeancias"},"Refer\xeancias"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/specs/jls/se21/html/jls-4.html#jls-4.2"},"Oracle. Java Language Specification. Types, Values and Variables: 4.2.1 Integral Types and Values.")),(0,l.kt)("p",null,"STALLINGS, William. Organiza\xe7\xe3o e Arquitetura de Computadores. 8. ed. S\xe3o Paulo: Pearson Practice Hall, 2010."),(0,l.kt)("div",{className:"footnotes"},(0,l.kt)("hr",{parentName:"div"}),(0,l.kt)("ol",{parentName:"div"},(0,l.kt)("li",{parentName:"ol",id:"fn-1"},"nove quintilh\xf5es, duzentos e vinte e tr\xeas quatrilh\xf5es, trezentos e setenta e dois trilh\xf5es, trinta e seis bilh\xf5es ,oitocentos e cinquenta e quatro milh\xf5es, setecentos e setenta e cinco mil, oitocentos e sete.",(0,l.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}v.isMDXComponent=!0}}]);