[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lpi",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "doc/01-Introducao/01-intro.html",
    "href": "doc/01-Introducao/01-intro.html",
    "title": "1  Introdução",
    "section": "",
    "text": "Material desenvolvido como apoio para a unidade curricular de Linguagem de Programação I.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introdução</span>"
    ]
  },
  {
    "objectID": "doc/01-Introducao/02-Logica_de_programacao.html",
    "href": "doc/01-Introducao/02-Logica_de_programacao.html",
    "title": "2  Lógica de programação",
    "section": "",
    "text": "O quê é a lógica?\nEstuda a “correção do raciocínio”, tem em vista a “ordem da razão”\n(Forbellone, 2006, pg 1).\nExemplos\nTodo mamífero é um animal.\nTodo cavalo é um mamífero.\nPortanto, Todo cavalo é um animal\n(Forbellone, 2006, pg 1)\nParaná um estado do Brasil.\nTodos os cascavelenses são paranaenses.\nLogo, todos os cascavelenses são brasileiros.\nA Lógica de programação consiste na ordem da razão e organização de processos de raciocínio e simbolização formais na programação de sistemas computacionais.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lógica de programação</span>"
    ]
  },
  {
    "objectID": "doc/01-Introducao/03-Algoritmo.html",
    "href": "doc/01-Introducao/03-Algoritmo.html",
    "title": "3  Algoritmo",
    "section": "",
    "text": "Um algoritmo é uma sequência de passos organizada, de maneira que a execução dos passos possibilita atingir um objetivo.\nJunto à idéia de algoritmo vem a noção de ordem, na execução dos passos.\nExemplo - Como faríamos para trocar uma lâmpada?\n\n\nResposta\n\npegar uma escada\ncolocar a escada abaixo da lâmpada\npegar uma lâmpada nova\nsubir na escada\nretirar a lâmpada velha\ncolocar a lâmpada nova\n\nExercício\n\nAbaixo há um algoritmo para trocar uma lâmpada.\n\nEle resolve o problema?\n\nO que há de errado?\n\n\ncolocar a escada abaixo da lâmpada\npegar uma escada\nretirar a lâmpada velha\nsubir na escada\ncolocar a lâmpada nova\npegar uma lâmpada nova\n\n\nResposta\n\nA ordem está incorreta. Desta forma, o algoritmo não resolve o problema.\n\nExercícios\n\nDesenvolva um algoritmo para fazer gelo.\nDesenvolva um algoritmo para fazer café.\nDesenvolva um algoritmo para trocar o pneu de um carro.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Algoritmo</span>"
    ]
  },
  {
    "objectID": "doc/01-Introducao/04-Linguagem_de_programacao.html",
    "href": "doc/01-Introducao/04-Linguagem_de_programacao.html",
    "title": "4  Linguagem de programação",
    "section": "",
    "text": "Uma linguagem de programação é um conjunto de funções específicas e bem definidas, com as quais é possível desenvolver um algoritmo.\nChamamos de código a um algoritmo desenvolvido em uma linguagem de programação.\nAtividade\n\nUm homem precisa atravessar um rio com um barco que possui capacidade de transportar apenas ele mesmo e mais uma de suas três cargas, que são: um lobo, um bode e uma caixa de alfafa. Indique as ações necessárias para que o homem consiga atravessar o rio sem perder suas cargas. Algumas regras devem ser sempre respeitadas: o lobo não pode ficar sozinho com o bode e o bode não pode ficar sozinho com a alfafa.\n\nDesenvolva um algoritmo para a solução desse problema.\n\n\nAtividade\nUm homem precisa atravessar um rio com um barco que possui capacidade de transportar apenas ele mesmo e mais uma de suas três cargas, que são: um lobo, um bode e uma caixa de alfafa. Indique as ações necessárias para que o homem consiga atravessar o rio sem perder suas cargas. Algumas regras devem ser sempre respeitadas: o lobo não pode ficar sozinho com o bode, o bode não pode ficar sozinho com a alfafa.\n\nUtilize apenas a função atravessar(p)\n\np, é o passageiro ou carga do barco, que podem ser lobo, bode, alfafa ou ninguém;\na função atravessar vai de um lado a outro, partindo do lado em que o barco está.\n\n\nAtividade\nElabore um algoritmo que mova três discos de uma Torre de Hanói, que consiste em três hastes (A, B e C), uma das quais serve de suporte para três discos de tamanhos diferentes (1, 2 e 3), os menores sobre os maiores. É possível mover um disco de cada vez para qualquer haste, porém nunca deve ser colocado um disco maior sobre um menor. O objetivo é transferir os três discos para outra haste. No exercício, considere que os discos a serem movimentados estão inicialmente na haste A e devem ser movidos para a haste C.\n\nUtilize a função movimentar(de, para), que movimenta o disco que está no topo da haste de e o coloca no topo da haste para. Apenas o disco que está no topo da haste de origem é movimentado.\n\n\nImagem: Wikimedia Commons",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linguagem de programação</span>"
    ]
  },
  {
    "objectID": "doc/02-Basicos/02-Entrada_saida.html",
    "href": "doc/02-Basicos/02-Entrada_saida.html",
    "title": "5  Entrada e Saída",
    "section": "",
    "text": "5.1 Saída de dados\nA saída de dados que utilizaremos aqui é a tela. Para mostrar uma mensagem na tela, utilizaremos a função abaixo, acompanhada da mensagem que desejamos apresentar na tela.\nExemplo\n- Para apresentar na tela a mensagem Olá Mundo:\nSaída na tela:\nExemplo\nSaída na tela:\nExercício - Desenvolva um algoritmo que apresenta seu nome na saída padrão.\nSaída na tela:\nSaída na tela:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Entrada e Saída</span>"
    ]
  },
  {
    "objectID": "doc/02-Basicos/02-Entrada_saida.html#saída-de-dados",
    "href": "doc/02-Basicos/02-Entrada_saida.html#saída-de-dados",
    "title": "5  Entrada e Saída",
    "section": "",
    "text": "System.out.println();\n\nSystem.out.println(\"Olá Mundo\");\n\nOlá Mundo\n\n\n\n\n\n\nAtenção\n\n\n\nPerceba que aqui estamos observando apenas a função de saída. Para que ela possa funcionar de maneira correta no algoritmo, é necessário que ela esteja dentro de uma estrutura básica.\npublic class Main{\n  public static void main(String args){\n    System.out.println(\"Olá Mundo\");\n  }\n}\nSaída na tela:\nOlá Mundo\n\n\n\n\nPara apresentar a mensagem Bom dia, José:\nSystem.out.println(\"Bom dia, José\");\n\n\nBom dia, José\n\n\nPara apresentar um valor específico:\n\nSystem.out.println(18);\n\n18\n\nPode-se também apresentar diversos resultados de uma única vez:\n\nSystem.out.println(\"A idade mínima deve ser de \" + 18 + \" anos\");\n\nA idade mínima deve ser de 18 anos\n\n5.1.1 Uso de armazenamento intermediário\nNo desenvolvimento de algoritmos, podemos utilizar armazenamento intermediário de valores. Para tal, devemos indicar qual é o tipo de dado que deverá ser guardado e um identificador desse armazenamento.\n:::info Informação O uso desse armazenamento é um tópico de grande importância no desenvolvimento de algoritmos. O veremos de forma mais detalhada ao abordarmos tipos primitivos de dados, constantes e variáveis. :::\nExemplo - Armazenando um valor e apresentando na tela\n \ninteiro: altura; //identificador que permite armazenar um número inteiro\naltura ← 50;\nescreva(altura); //saída: 50\n \nint altura;\naltura = 50; //identificador que permite armazenar um número inteiro\nSystem.out.println(altura); //saída: 50\n \naltura = 50 #identificador que permite armazenar um número inteiro\nprint(altura) # saída: 50\n\n\nint altura; //identificador que permite armazenar um número inteiro\naltura = 50;\nprintf(\"%d\", altura); // saída: 50\n \nSaída na tela:\n50\n\nÉ possível também apresentar diversos valores de uma única vez em uma única saída.\nExemplo\n \ncaractere: nome ← \"Dunga\";\ninteiro: idade ← 35;\nescreva(nome, \"tem\", idade, \"anos de idade.\");\n \nString nome = \"Dunga\";\nint idade = 35;\nSystem.out.println(nome + \" tem \" + anos \" de idade.\");\n \nnome = Dunga\nidade = 35\nprint(f\"{nome} tem {idade} anos de idade.\")\n\n\nchar nome = \"Dunga\";\nint idade;\n\nidade = 35;\nprintf(\"%s %s %d %s\",nome,\"tem\", idade, \"anos de idade.\");\n \nSaída na tela:\nDunga tem 35 anos de idade\nExemplo\npublic class Main{\n  public static void main(String[] args){\n    int dia;\n    String mes;\n    int ano;\n\n    dia = 7;\n    mes = \"mar;o\"\n    ano = 2024;\n\n    System.out.println(\"Hoje é dia \" + dia + \" de \" + mes + \" do ano de \" + ano);\n  }\n}\nExercícios\n\nDesenvolva um algoritmo que mostra na tela a mensagem Hoje é dia de aula de Algoritmos. \nDesenvolva um algoritmo que dentro dele possui um armazenamento intermediário de caracteres chamado mes_ferias_1 e mes_ferias_2, onde cada um deve possuir os valores janeiro e julho. Seu algoritmo deve informar na tela uma mensagem informando que estes são os meses de férias previsto no calendário acadêmico. \nDesenvolva um algoritmo que dentro dele possui os armazenamentos intermediários de caracteres chamado mes_ferias_1 e mes_ferias_2, onde cada um deve possuir os valores janeiro e julho. Também possui os armazenamentos intermediários dias_ferias_1 e dias_ferias_2, com os conteúdos 30 e 15, respectivamente. Seu algoritmo deve informar na tela uma mensagem informando que são previstos 30 dias de férias em janeiro e 15 dias de férias em julho.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Entrada e Saída</span>"
    ]
  },
  {
    "objectID": "doc/02-Basicos/02-Entrada_saida.html#entrada-de-dados",
    "href": "doc/02-Basicos/02-Entrada_saida.html#entrada-de-dados",
    "title": "5  Entrada e Saída",
    "section": "5.2 Entrada de dados",
    "text": "5.2 Entrada de dados\nPara que a entrada de dados possa ser realizado é necessário passar ao algoritmo uma informação adicional, com o identificador em que o valor deverá ser armazenado.\n\nPara a entrada de dados pode-se utilizar a seguinte função:\n \nleia(); //para qualquer tipo de dados\n \nAntes de iniciar a leitura de dados, é necessário associar um identificador à entrada.\nScanner entrada = new Scanner(System.in); //entrada é um identificador\nEm seguida é possível ler o dado desejado utilizando .next() ou .nextInt()\nentrada.next(); //para dados do tipo caractere\nou\nentrada.nextInt(); //para dados do tipo inteiro\nFinalizada a leitura de dados, deve-se chamar a função .close().\nentrada.close();\n:::caution Atenção Para que a função de entrada possa ser utilizada é necessário importar a biblioteca também é necessário importar a biblioteca Scanner.\nPara tal, é necessário incluir no início do código a linha\nimport java.util.Scanner;\n:::\n:::caution Atenção O código Scanner entrada = new Scanner(System.in); realiza uma associação do identificador entrada com a entrada padrão (comumente, o teclado).\nApós a finalização das entradas, é necessário desassociar o identificador, com a função entrada.close().\n:::\n \ninput() # para dados do tipo caractere\nou\n(int) input() # para dados do tipo inteiro\n\n\ngets(); // entrada de dados do tipo caractere\nou c   scanf(\"%d\", &); // entrada de dados do tipo inteiro\n:::caution Atenção Assim como na função de saída printf, para que as funções de entrada scanf() e gets() possam ser utilizadas também é necessário importar a biblioteca de entrada e saída padrão. :::\n\n\nConhecendo a função que realiza a leitura de dados da entrada padrão, devemos informar qual identificador será responsável por armazenar o dado recebido na entrada.\nExemplo - recebendo valores na entrada e armazenando\n\n \nrecebendo da entrada um valor do tipo inteiro\ninteiro: numero;\nleia(numero); \nrecebendo da entrada um valor do tipo caractere\ncaractere: palavra;\nleia(palavra);\n\n\nrecebendo da entrada um dado do tipo inteiro:\nint numero;\nScanner entrada = new Scanner(System.in);\nnumero = entrada.nextInt();\nentrada.close();\nrecebendo da entrada um dado do tipo caractere: javascript   String palavra;   Scanner entrada = new Scanner(System.in);   palavra = entrada.next();   entrada.close();\n\n\nrecebendo da entrada um dado do tipo inteiro: python   numero = (int) input()\nrecebendo da entrada um dado do tipo caractere: python   palavra = input()\n\n\nrecebendo da entrada um dado do tipo inteiro c   int numero;   scanf(\"%d\", &numero); // observe o &\nrecebendo da entrada um dado do tipo caractere c   char palavra[100];   gets(palavra); //perceba que o & não é necessário aqui\n:::caution Atenção O uso da função scanf() requer cuidado ao mencionar o identificador de onde o valor será armazenado. Observe o uso do & antes do nome do identificado. Para caracteres com a função gets() este sinal não é necessário.\nEstas diferenças e porque isto é realizado desta forma será explicado futuramente, quando os conteúdos de vetores e manipulação de cadeias de caracteres forem abordados. :::\n\n\nExemplo\n- Solicite ao usuário que digite seu nome\n \n```c showLineNumbers //identificadores caractere: nome;\n//entrada\n// highlight-next-line\nleia(nome);   //recebe o dado da entrada\n\n&lt;details&gt;\n&lt;summary&gt;Código completo&lt;/summary&gt;\n\n```c showLineNumbers\ninicio;\n  //identificadores\n  caractere: nome;\n\n  //entrada\n  // highlight-next-line\n  leia(nome);   //recebe o dado da entrada\n\nfim.\n\n \n//identificadores\nString nome;\n\n//entrada\n// highlight-next-line\nnome = entrada.next()   //recebe o dado da entrada\n\n\nCódigo completo\n\n  public class Main{\n    public static void main(String args){\n      //identificadores\n      String nome;\n      Scanner entrada;\n\n      //entrada\n      entrada = new Scanner(System.in); //associa o objeto à entrada padrão\n\n      // highlight-next-line\n      nome = entrada.next()   //recebe o dado da entrada\n\n      entrada.close()         //finaliza a entrada de dados\n    }\n  }\n\n \nA entrada de dados é a maneira como o usuário pode inserir dados para dentro do algoritmo. Em Python utilizaremos a função input().\npython showLineNumbers   nome = input()\n\n\nCódigo completo\n\n    if __name__ == \"main\":\n      nome = input() #recebe o dado da entrada\n\n\n\nchar nome[100];\n// highlight-next-line\ngets(nome); //recebe o dado da entrada\n\n\nCódigo completo\n\n    #include &lt;stdio.h&gt;\n\n    int main(){\n      char nome[100];\n    // highlight-next-line\n      gets(nome); //recebe o dado da entrada\n\n      return 0;\n    }\n    ```\n  &lt;/details&gt;\n\n  &lt;/TabItem&gt;\n\n&lt;/Tabs&gt;\n\n\n**Observação**  \n\n- Perceba que no exemplo, o nome do usuário será armazenado na região de armazenamento identificada como `nome`.\n\n**Exemplo**\n- Pergunte ao usuário seu nome e idade. Em seguida, mostre na tela as informações digitadas.\n\n&lt;Tabs groupId=\"language\"&gt;\n  &lt;TabItem value=\"pseudocodigo\" label=\"Pseudocódigo\" default&gt;\n\n  ```c\n  //Identificadores\n  caractere nome;\n  inteiro idade;\n\n  //Entrada\n  escreva(\"Nome: \");\n  leia(nome);\n  escreva(\"Idade: \");\n  leia(idade);\n\n  //Saída\n  escreva(nome, \" tem \", idade, \" anos de idade.\");\n\n\nCódigo completo\n\n  inicio\n\n    //Variáveis\n    caractere nome;\n    inteiro idade;\n\n    //Entrada\n    escreva(\"Nome: \");\n    leia(nome);\n    escreva(\"Idade: \");\n    leia(idade);\n\n    //Saída\n    escreva(nome, \" tem \", idade, \" anos de idade.\");\n\n  fim.\n\n \n  //Identificadores\n  String nome;\n  int idade;\n\n  //Entrada\n  System.out.println(\"Nome: \");\n  nome = entrada.next();\n  System.out.println(\"Idade: \");\n  idade = entrada.nextInt();\n\n  //Saída\n  System.out.prinln(nome + \" tem \" + idade + \" anos de idade.\");\n\n\nCódigo completo\n\n  public class Main{\n    public static void main(String args){\n      //Variáveis\n      String nome;\n      int idade;\n\n      //Entrada\n      Scanner entrada = new Scanner(System.in);\n\n      System.out.println(\"Nome: \");\n      nome = entrada.next();\n      System.out.println(\"Idade: \");\n      idade = entrada.nextInt();\n      entrada.close()\n\n      //Saída\n      System.out.prinln(nome + \" tem \" + idade + \" anos de idade.\");\n    }\n  }\n\n \n  #Entrada\n  nome = input(\"Nome: \")\n  idade = input(\"Idade: \")\n\n  #Saída\n  print(f\"{nome} tem {idade} anos de idade\")\n\n\nCódigo completo\n\n    if __name__ == \"main\":\n      #Entrada\n      nome = input(\"Nome: \")\n      idade = input(\"Idade: \")\n\n      #Saída\n      print(f\"{nome} tem {idade} anos de idade\")\n    ```\n  &lt;/details&gt;\n\n\n  &lt;/TabItem&gt;\n\n  &lt;TabItem value=\"c\" label=\"C\"&gt;\n\n  ```c\n  //Variáveis\n  char nome[100];\n  int idade;\n\n  //Entrada\n  gets(nome);\n  scanf(\"%d\", &idade)\n\n  //Saída\n  printf(\"%s %s %d %s\\n\", nome, \"tem\", idade, \"anos de idade\")\n\n\nCódigo completo\n\n  #include&lt;stdio.h&gt;\n\n  int main(void){\n    //Variáveis\n    char nome[100];\n    int idade;\n\n    //Entrada\n    gets(nome);\n    scanf(\"%d\", &idade)\n\n    //Saída\n    printf(\"%s %s %d %s\\n\", nome, \"tem\", idade, \"anos de idade\")\n  }\n\n \nObservação - No exemplo, o nome do usuário será armazenado no espaço identificado como nome e a idade em idade.\nExercícios\n\nSolicite ao usuário que digite um número. Em seguida, mostre na tela o número digitado.\nDesenvolva um algoritmo que pergunta ao usuário o nome do usuário, e em seguida responde “Boa noite, user”, substituindo user pelo nome digitado.\nFaça um algoritmo que pergunta ao usuário a sua idade, e em seguida informa a mensagem “Você tem X anos”, substituindo X pela idade digitada.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Entrada e Saída</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Sumário",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sumário</span>"
    ]
  }
]